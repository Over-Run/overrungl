// alc.h

using ALCdevice = struct ALCdevice;
using ALCcontext = struct ALCcontext;
using ALCboolean = java ALCboolean;
using ALCchar = char;
using ALCbyte = signed char;
using ALCubyte = unsigned char;
using ALCshort = short;
using ALCushort = unsigned short;
using ALCint = int;
using ALCuint = unsigned int;
using ALCsizei = int;
using ALCenum = int;
using ALCfloat = float;
using ALCdouble = double;
using ALCvoid = void;

#define ALC_FALSE                                0
#define ALC_TRUE                                 1
#define ALC_FREQUENCY                            0x1007
#define ALC_REFRESH                              0x1008
#define ALC_SYNC                                 0x1009
#define ALC_MONO_SOURCES                         0x1010
#define ALC_STEREO_SOURCES                       0x1011
#define ALC_NO_ERROR                             0
#define ALC_INVALID_DEVICE                       0xA001
#define ALC_INVALID_CONTEXT                      0xA002
#define ALC_INVALID_ENUM                         0xA003
#define ALC_INVALID_VALUE                        0xA004
#define ALC_OUT_OF_MEMORY                        0xA005
#define ALC_MAJOR_VERSION                        0x1000
#define ALC_MINOR_VERSION                        0x1001
#define ALC_ATTRIBUTES_SIZE                      0x1002
#define ALC_ALL_ATTRIBUTES                       0x1003
#define ALC_DEFAULT_DEVICE_SPECIFIER             0x1004
#define ALC_DEVICE_SPECIFIER                     0x1005
#define ALC_EXTENSIONS                           0x1006

#define ALC_CAPTURE_DEVICE_SPECIFIER             0x310
#define ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER     0x311
#define ALC_CAPTURE_SAMPLES                      0x312

#define ALC_DEFAULT_ALL_DEVICES_SPECIFIER        0x1012
#define ALC_ALL_DEVICES_SPECIFIER                0x1013

fn ALCcontext* alcCreateContext(ALCdevice *device, const ALCint *attrlist);
fn ALCboolean  alcMakeContextCurrent(ALCcontext *context);
fn void        alcProcessContext(ALCcontext *context);
fn void        alcSuspendContext(ALCcontext *context);
fn void        alcDestroyContext(ALCcontext *context);
fn ALCdevice*  alcGetContextsDevice(ALCcontext *context);

fn ALCdevice* alcOpenDevice(const ALCchar *devicename);
fn ALCboolean alcCloseDevice(ALCdevice *device);

fn ALCenum alcGetError(ALCdevice *device);

fn ALCboolean alcIsExtensionPresent(ALCdevice *device, const ALCchar *extname);
fn ALCvoid*   alcGetProcAddress(ALCdevice *device, const ALCchar *funcname);
fn ALCenum    alcGetEnumValue(ALCdevice *device, const ALCchar *enumname);

fn const ALCchar* alcGetString(ALCdevice *device, ALCenum param);
fn void           alcGetIntegerv(ALCdevice *device, ALCenum param, ALCsizei size, ALCint *values);

fn ALCdevice* alcCaptureOpenDevice(const ALCchar *devicename, ALCuint frequency, ALCenum format, ALCsizei buffersize);
fn ALCboolean alcCaptureCloseDevice(ALCdevice *device);
fn void       alcCaptureStart(ALCdevice *device);
fn void       alcCaptureStop(ALCdevice *device);
fn void       alcCaptureSamples(ALCdevice *device, ALCvoid *buffer, ALCsizei samples);
