// stb_image.h

using STBbool = java STBbool;
using FILE = void*; // define FILE as opaque struct as we are using Java

enum
{
   STBI_default = 0, // only used for desired_channels

   STBI_grey       = 1,
   STBI_grey_alpha = 2,
   STBI_rgb        = 3,
   STBI_rgb_alpha  = 4
};

using stbi_uc = unsigned char;
using stbi_us = unsigned short;

using stbi_io_callbacks$read = upcall int     STBIIORead(void *user, char *data, int size);
using stbi_io_callbacks$skip = upcall void    STBIIOSkip(void *user, int n);
using stbi_io_callbacks$eof  = upcall STBbool STBIIOEof (void *user);
using stbi_io_callbacks = struct STBIIOCallbacks {
    stbi_io_callbacks$read read;
    stbi_io_callbacks$skip skip;
    stbi_io_callbacks$eof  eof;
};

fn stbi_uc *stbi_load_from_memory   (stbi_uc           const *buffer, int len   , int *x, int *y, int *channels_in_file, int desired_channels);
fn stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk  , void *user, int *x, int *y, int *channels_in_file, int desired_channels);

fn stbi_uc *stbi_load            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
fn stbi_uc *stbi_load_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);

fn stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp);

fn stbi_us *stbi_load_16_from_memory   (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
fn stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);

fn stbi_us *stbi_load_16          (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
fn stbi_us *stbi_load_from_file_16(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);

fn float *stbi_loadf_from_memory     (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
fn float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y,  int *channels_in_file, int desired_channels);

fn float *stbi_loadf            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
fn float *stbi_loadf_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);

fn void   stbi_hdr_to_ldr_gamma(float gamma);
fn void   stbi_hdr_to_ldr_scale(float scale);

fn void   stbi_ldr_to_hdr_gamma(float gamma);
fn void   stbi_ldr_to_hdr_scale(float scale);

fn STBbool    stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);
fn STBbool    stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);

fn STBbool      stbi_is_hdr          (char const *filename);
fn STBbool      stbi_is_hdr_from_file(FILE *f);

fn const char *stbi_failure_reason  ();

fn void     stbi_image_free      (void *retval_from_stbi_load);

fn STBbool      stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);
fn STBbool      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);
fn STBbool      stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len);
fn STBbool      stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *clbk, void *user);

fn STBbool      stbi_info               (char const *filename,     int *x, int *y, int *comp);
fn STBbool      stbi_info_from_file     (FILE *f,                  int *x, int *y, int *comp);
fn STBbool      stbi_is_16_bit          (char const *filename);
fn STBbool      stbi_is_16_bit_from_file(FILE *f);

fn void stbi_set_unpremultiply_on_load(STBbool flag_true_if_should_unpremultiply);

fn void stbi_convert_iphone_png_to_rgb(STBbool flag_true_if_should_convert);

fn void stbi_set_flip_vertically_on_load(STBbool flag_true_if_should_flip);

fn void stbi_set_unpremultiply_on_load_thread(STBbool flag_true_if_should_unpremultiply);
fn void stbi_convert_iphone_png_to_rgb_thread(STBbool flag_true_if_should_convert);
fn void stbi_set_flip_vertically_on_load_thread(STBbool flag_true_if_should_flip);

fn char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);
fn char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header);
fn char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);
fn int   stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);

fn char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);
fn int   stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);
