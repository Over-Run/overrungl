// glfw3.h

#define GLFW_VERSION_MAJOR          3
#define GLFW_VERSION_MINOR          5
#define GLFW_VERSION_REVISION       0

#define GLFW_TRUE                   1
#define GLFW_FALSE                  0

#define GLFW_RELEASE                0
#define GLFW_PRESS                  1
#define GLFW_REPEAT                 2

#define GLFW_HAT_CENTERED           0
#define GLFW_HAT_UP                 1
#define GLFW_HAT_RIGHT              2
#define GLFW_HAT_DOWN               4
#define GLFW_HAT_LEFT               8
#define GLFW_HAT_RIGHT_UP           (GLFW_HAT_RIGHT | GLFW_HAT_UP)
#define GLFW_HAT_RIGHT_DOWN         (GLFW_HAT_RIGHT | GLFW_HAT_DOWN)
#define GLFW_HAT_LEFT_UP            (GLFW_HAT_LEFT  | GLFW_HAT_UP)
#define GLFW_HAT_LEFT_DOWN          (GLFW_HAT_LEFT  | GLFW_HAT_DOWN)

#define GLFW_KEY_UNKNOWN            -1

#define GLFW_KEY_SPACE              32
#define GLFW_KEY_APOSTROPHE         39
#define GLFW_KEY_COMMA              44
#define GLFW_KEY_MINUS              45
#define GLFW_KEY_PERIOD             46
#define GLFW_KEY_SLASH              47
#define GLFW_KEY_0                  48
#define GLFW_KEY_1                  49
#define GLFW_KEY_2                  50
#define GLFW_KEY_3                  51
#define GLFW_KEY_4                  52
#define GLFW_KEY_5                  53
#define GLFW_KEY_6                  54
#define GLFW_KEY_7                  55
#define GLFW_KEY_8                  56
#define GLFW_KEY_9                  57
#define GLFW_KEY_SEMICOLON          59
#define GLFW_KEY_EQUAL              61
#define GLFW_KEY_A                  65
#define GLFW_KEY_B                  66
#define GLFW_KEY_C                  67
#define GLFW_KEY_D                  68
#define GLFW_KEY_E                  69
#define GLFW_KEY_F                  70
#define GLFW_KEY_G                  71
#define GLFW_KEY_H                  72
#define GLFW_KEY_I                  73
#define GLFW_KEY_J                  74
#define GLFW_KEY_K                  75
#define GLFW_KEY_L                  76
#define GLFW_KEY_M                  77
#define GLFW_KEY_N                  78
#define GLFW_KEY_O                  79
#define GLFW_KEY_P                  80
#define GLFW_KEY_Q                  81
#define GLFW_KEY_R                  82
#define GLFW_KEY_S                  83
#define GLFW_KEY_T                  84
#define GLFW_KEY_U                  85
#define GLFW_KEY_V                  86
#define GLFW_KEY_W                  87
#define GLFW_KEY_X                  88
#define GLFW_KEY_Y                  89
#define GLFW_KEY_Z                  90
#define GLFW_KEY_LEFT_BRACKET       91
#define GLFW_KEY_BACKSLASH          92
#define GLFW_KEY_RIGHT_BRACKET      93
#define GLFW_KEY_GRAVE_ACCENT       96
#define GLFW_KEY_WORLD_1            161
#define GLFW_KEY_WORLD_2            162

#define GLFW_KEY_ESCAPE             256
#define GLFW_KEY_ENTER              257
#define GLFW_KEY_TAB                258
#define GLFW_KEY_BACKSPACE          259
#define GLFW_KEY_INSERT             260
#define GLFW_KEY_DELETE             261
#define GLFW_KEY_RIGHT              262
#define GLFW_KEY_LEFT               263
#define GLFW_KEY_DOWN               264
#define GLFW_KEY_UP                 265
#define GLFW_KEY_PAGE_UP            266
#define GLFW_KEY_PAGE_DOWN          267
#define GLFW_KEY_HOME               268
#define GLFW_KEY_END                269
#define GLFW_KEY_CAPS_LOCK          280
#define GLFW_KEY_SCROLL_LOCK        281
#define GLFW_KEY_NUM_LOCK           282
#define GLFW_KEY_PRINT_SCREEN       283
#define GLFW_KEY_PAUSE              284
#define GLFW_KEY_F1                 290
#define GLFW_KEY_F2                 291
#define GLFW_KEY_F3                 292
#define GLFW_KEY_F4                 293
#define GLFW_KEY_F5                 294
#define GLFW_KEY_F6                 295
#define GLFW_KEY_F7                 296
#define GLFW_KEY_F8                 297
#define GLFW_KEY_F9                 298
#define GLFW_KEY_F10                299
#define GLFW_KEY_F11                300
#define GLFW_KEY_F12                301
#define GLFW_KEY_F13                302
#define GLFW_KEY_F14                303
#define GLFW_KEY_F15                304
#define GLFW_KEY_F16                305
#define GLFW_KEY_F17                306
#define GLFW_KEY_F18                307
#define GLFW_KEY_F19                308
#define GLFW_KEY_F20                309
#define GLFW_KEY_F21                310
#define GLFW_KEY_F22                311
#define GLFW_KEY_F23                312
#define GLFW_KEY_F24                313
#define GLFW_KEY_F25                314
#define GLFW_KEY_KP_0               320
#define GLFW_KEY_KP_1               321
#define GLFW_KEY_KP_2               322
#define GLFW_KEY_KP_3               323
#define GLFW_KEY_KP_4               324
#define GLFW_KEY_KP_5               325
#define GLFW_KEY_KP_6               326
#define GLFW_KEY_KP_7               327
#define GLFW_KEY_KP_8               328
#define GLFW_KEY_KP_9               329
#define GLFW_KEY_KP_DECIMAL         330
#define GLFW_KEY_KP_DIVIDE          331
#define GLFW_KEY_KP_MULTIPLY        332
#define GLFW_KEY_KP_SUBTRACT        333
#define GLFW_KEY_KP_ADD             334
#define GLFW_KEY_KP_ENTER           335
#define GLFW_KEY_KP_EQUAL           336
#define GLFW_KEY_LEFT_SHIFT         340
#define GLFW_KEY_LEFT_CONTROL       341
#define GLFW_KEY_LEFT_ALT           342
#define GLFW_KEY_LEFT_SUPER         343
#define GLFW_KEY_RIGHT_SHIFT        344
#define GLFW_KEY_RIGHT_CONTROL      345
#define GLFW_KEY_RIGHT_ALT          346
#define GLFW_KEY_RIGHT_SUPER        347
#define GLFW_KEY_MENU               348

#define GLFW_KEY_LAST               GLFW_KEY_MENU

#define GLFW_MOD_SHIFT           0x0001
#define GLFW_MOD_CONTROL         0x0002
#define GLFW_MOD_ALT             0x0004
#define GLFW_MOD_SUPER           0x0008
#define GLFW_MOD_CAPS_LOCK       0x0010
#define GLFW_MOD_NUM_LOCK        0x0020

#define GLFW_MOUSE_BUTTON_1         0
#define GLFW_MOUSE_BUTTON_2         1
#define GLFW_MOUSE_BUTTON_3         2
#define GLFW_MOUSE_BUTTON_4         3
#define GLFW_MOUSE_BUTTON_5         4
#define GLFW_MOUSE_BUTTON_6         5
#define GLFW_MOUSE_BUTTON_7         6
#define GLFW_MOUSE_BUTTON_8         7
#define GLFW_MOUSE_BUTTON_LAST      GLFW_MOUSE_BUTTON_8
#define GLFW_MOUSE_BUTTON_LEFT      GLFW_MOUSE_BUTTON_1
#define GLFW_MOUSE_BUTTON_RIGHT     GLFW_MOUSE_BUTTON_2
#define GLFW_MOUSE_BUTTON_MIDDLE    GLFW_MOUSE_BUTTON_3

#define GLFW_JOYSTICK_1             0
#define GLFW_JOYSTICK_2             1
#define GLFW_JOYSTICK_3             2
#define GLFW_JOYSTICK_4             3
#define GLFW_JOYSTICK_5             4
#define GLFW_JOYSTICK_6             5
#define GLFW_JOYSTICK_7             6
#define GLFW_JOYSTICK_8             7
#define GLFW_JOYSTICK_9             8
#define GLFW_JOYSTICK_10            9
#define GLFW_JOYSTICK_11            10
#define GLFW_JOYSTICK_12            11
#define GLFW_JOYSTICK_13            12
#define GLFW_JOYSTICK_14            13
#define GLFW_JOYSTICK_15            14
#define GLFW_JOYSTICK_16            15
#define GLFW_JOYSTICK_LAST          GLFW_JOYSTICK_16

#define GLFW_GAMEPAD_BUTTON_A               0
#define GLFW_GAMEPAD_BUTTON_B               1
#define GLFW_GAMEPAD_BUTTON_X               2
#define GLFW_GAMEPAD_BUTTON_Y               3
#define GLFW_GAMEPAD_BUTTON_LEFT_BUMPER     4
#define GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER    5
#define GLFW_GAMEPAD_BUTTON_BACK            6
#define GLFW_GAMEPAD_BUTTON_START           7
#define GLFW_GAMEPAD_BUTTON_GUIDE           8
#define GLFW_GAMEPAD_BUTTON_LEFT_THUMB      9
#define GLFW_GAMEPAD_BUTTON_RIGHT_THUMB     10
#define GLFW_GAMEPAD_BUTTON_DPAD_UP         11
#define GLFW_GAMEPAD_BUTTON_DPAD_RIGHT      12
#define GLFW_GAMEPAD_BUTTON_DPAD_DOWN       13
#define GLFW_GAMEPAD_BUTTON_DPAD_LEFT       14
#define GLFW_GAMEPAD_BUTTON_LAST            GLFW_GAMEPAD_BUTTON_DPAD_LEFT

#define GLFW_GAMEPAD_BUTTON_CROSS       GLFW_GAMEPAD_BUTTON_A
#define GLFW_GAMEPAD_BUTTON_CIRCLE      GLFW_GAMEPAD_BUTTON_B
#define GLFW_GAMEPAD_BUTTON_SQUARE      GLFW_GAMEPAD_BUTTON_X
#define GLFW_GAMEPAD_BUTTON_TRIANGLE    GLFW_GAMEPAD_BUTTON_Y

#define GLFW_GAMEPAD_AXIS_LEFT_X        0
#define GLFW_GAMEPAD_AXIS_LEFT_Y        1
#define GLFW_GAMEPAD_AXIS_RIGHT_X       2
#define GLFW_GAMEPAD_AXIS_RIGHT_Y       3
#define GLFW_GAMEPAD_AXIS_LEFT_TRIGGER  4
#define GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER 5
#define GLFW_GAMEPAD_AXIS_LAST          GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER

#define GLFW_NO_ERROR               0
#define GLFW_NOT_INITIALIZED        0x00010001
#define GLFW_NO_CURRENT_CONTEXT     0x00010002
#define GLFW_INVALID_ENUM           0x00010003
#define GLFW_INVALID_VALUE          0x00010004
#define GLFW_OUT_OF_MEMORY          0x00010005
#define GLFW_API_UNAVAILABLE        0x00010006
#define GLFW_VERSION_UNAVAILABLE    0x00010007
#define GLFW_PLATFORM_ERROR         0x00010008
#define GLFW_FORMAT_UNAVAILABLE     0x00010009
#define GLFW_NO_WINDOW_CONTEXT      0x0001000A
#define GLFW_CURSOR_UNAVAILABLE     0x0001000B
#define GLFW_FEATURE_UNAVAILABLE    0x0001000C
#define GLFW_FEATURE_UNIMPLEMENTED  0x0001000D
#define GLFW_PLATFORM_UNAVAILABLE   0x0001000E

#define GLFW_FOCUSED                0x00020001
#define GLFW_ICONIFIED              0x00020002
#define GLFW_RESIZABLE              0x00020003
#define GLFW_VISIBLE                0x00020004
#define GLFW_DECORATED              0x00020005
#define GLFW_AUTO_ICONIFY           0x00020006
#define GLFW_FLOATING               0x00020007
#define GLFW_MAXIMIZED              0x00020008
#define GLFW_CENTER_CURSOR          0x00020009
#define GLFW_TRANSPARENT_FRAMEBUFFER 0x0002000A
#define GLFW_HOVERED                0x0002000B
#define GLFW_FOCUS_ON_SHOW          0x0002000C
#define GLFW_MOUSE_PASSTHROUGH      0x0002000D
#define GLFW_POSITION_X             0x0002000E
#define GLFW_POSITION_Y             0x0002000F
#define GLFW_RED_BITS               0x00021001
#define GLFW_GREEN_BITS             0x00021002
#define GLFW_BLUE_BITS              0x00021003
#define GLFW_ALPHA_BITS             0x00021004
#define GLFW_DEPTH_BITS             0x00021005
#define GLFW_STENCIL_BITS           0x00021006
#define GLFW_ACCUM_RED_BITS         0x00021007
#define GLFW_ACCUM_GREEN_BITS       0x00021008
#define GLFW_ACCUM_BLUE_BITS        0x00021009
#define GLFW_ACCUM_ALPHA_BITS       0x0002100A
#define GLFW_AUX_BUFFERS            0x0002100B
#define GLFW_STEREO                 0x0002100C
#define GLFW_SAMPLES                0x0002100D
#define GLFW_SRGB_CAPABLE           0x0002100E
#define GLFW_REFRESH_RATE           0x0002100F
#define GLFW_DOUBLEBUFFER           0x00021010
#define GLFW_CLIENT_API             0x00022001
#define GLFW_CONTEXT_VERSION_MAJOR  0x00022002
#define GLFW_CONTEXT_VERSION_MINOR  0x00022003
#define GLFW_CONTEXT_REVISION       0x00022004
#define GLFW_CONTEXT_ROBUSTNESS     0x00022005
#define GLFW_OPENGL_FORWARD_COMPAT  0x00022006
#define GLFW_CONTEXT_DEBUG          0x00022007
#define GLFW_OPENGL_DEBUG_CONTEXT   GLFW_CONTEXT_DEBUG
#define GLFW_OPENGL_PROFILE         0x00022008
#define GLFW_CONTEXT_RELEASE_BEHAVIOR 0x00022009
#define GLFW_CONTEXT_NO_ERROR       0x0002200A
#define GLFW_CONTEXT_CREATION_API   0x0002200B
#define GLFW_SCALE_TO_MONITOR       0x0002200C
#define GLFW_SCALE_FRAMEBUFFER      0x0002200D
#define GLFW_COCOA_RETINA_FRAMEBUFFER 0x00023001
#define GLFW_COCOA_FRAME_NAME         0x00023002
#define GLFW_COCOA_GRAPHICS_SWITCHING 0x00023003
#define GLFW_X11_CLASS_NAME         0x00024001
#define GLFW_X11_INSTANCE_NAME      0x00024002
#define GLFW_WIN32_KEYBOARD_MENU    0x00025001
#define GLFW_WIN32_SHOWDEFAULT      0x00025002
#define GLFW_WAYLAND_APP_ID         0x00026001

#define GLFW_NO_API                          0
#define GLFW_OPENGL_API             0x00030001
#define GLFW_OPENGL_ES_API          0x00030002

#define GLFW_NO_ROBUSTNESS                   0
#define GLFW_NO_RESET_NOTIFICATION  0x00031001
#define GLFW_LOSE_CONTEXT_ON_RESET  0x00031002

#define GLFW_OPENGL_ANY_PROFILE              0
#define GLFW_OPENGL_CORE_PROFILE    0x00032001
#define GLFW_OPENGL_COMPAT_PROFILE  0x00032002

#define GLFW_CURSOR                  0x00033001
#define GLFW_STICKY_KEYS             0x00033002
#define GLFW_STICKY_MOUSE_BUTTONS    0x00033003
#define GLFW_LOCK_KEY_MODS           0x00033004
#define GLFW_RAW_MOUSE_MOTION        0x00033005
#define GLFW_UNLIMITED_MOUSE_BUTTONS 0x00033006

#define GLFW_CURSOR_NORMAL          0x00034001
#define GLFW_CURSOR_HIDDEN          0x00034002
#define GLFW_CURSOR_DISABLED        0x00034003
#define GLFW_CURSOR_CAPTURED        0x00034004

#define GLFW_ANY_RELEASE_BEHAVIOR            0
#define GLFW_RELEASE_BEHAVIOR_FLUSH 0x00035001
#define GLFW_RELEASE_BEHAVIOR_NONE  0x00035002

#define GLFW_NATIVE_CONTEXT_API     0x00036001
#define GLFW_EGL_CONTEXT_API        0x00036002
#define GLFW_OSMESA_CONTEXT_API     0x00036003

#define GLFW_ANGLE_PLATFORM_TYPE_NONE    0x00037001
#define GLFW_ANGLE_PLATFORM_TYPE_OPENGL  0x00037002
#define GLFW_ANGLE_PLATFORM_TYPE_OPENGLES 0x00037003
#define GLFW_ANGLE_PLATFORM_TYPE_D3D9    0x00037004
#define GLFW_ANGLE_PLATFORM_TYPE_D3D11   0x00037005
#define GLFW_ANGLE_PLATFORM_TYPE_VULKAN  0x00037007
#define GLFW_ANGLE_PLATFORM_TYPE_METAL   0x00037008

#define GLFW_WAYLAND_PREFER_LIBDECOR    0x00038001
#define GLFW_WAYLAND_DISABLE_LIBDECOR   0x00038002

#define GLFW_ANY_POSITION           0x80000000

#define GLFW_ARROW_CURSOR           0x00036001
#define GLFW_IBEAM_CURSOR           0x00036002
#define GLFW_CROSSHAIR_CURSOR       0x00036003
#define GLFW_POINTING_HAND_CURSOR   0x00036004
#define GLFW_RESIZE_EW_CURSOR       0x00036005
#define GLFW_RESIZE_NS_CURSOR       0x00036006
#define GLFW_RESIZE_NWSE_CURSOR     0x00036007
#define GLFW_RESIZE_NESW_CURSOR     0x00036008
#define GLFW_RESIZE_ALL_CURSOR      0x00036009
#define GLFW_NOT_ALLOWED_CURSOR     0x0003600A
#define GLFW_HRESIZE_CURSOR         GLFW_RESIZE_EW_CURSOR
#define GLFW_VRESIZE_CURSOR         GLFW_RESIZE_NS_CURSOR
#define GLFW_HAND_CURSOR            GLFW_POINTING_HAND_CURSOR

#define GLFW_CONNECTED              0x00040001
#define GLFW_DISCONNECTED           0x00040002

#define GLFW_JOYSTICK_HAT_BUTTONS   0x00050001
#define GLFW_ANGLE_PLATFORM_TYPE    0x00050002
#define GLFW_PLATFORM               0x00050003
#define GLFW_COCOA_CHDIR_RESOURCES  0x00051001
#define GLFW_COCOA_MENUBAR          0x00051002
#define GLFW_X11_XCB_VULKAN_SURFACE 0x00052001
#define GLFW_WAYLAND_LIBDECOR       0x00053001

#define GLFW_ANY_PLATFORM           0x00060000
#define GLFW_PLATFORM_WIN32         0x00060001
#define GLFW_PLATFORM_COCOA         0x00060002
#define GLFW_PLATFORM_WAYLAND       0x00060003
#define GLFW_PLATFORM_X11           0x00060004
#define GLFW_PLATFORM_NULL          0x00060005

#define GLFW_DONT_CARE              -1

using GLFWboolean = java GLFWboolean;
using PFN_vkGetInstanceProcAddr = void*;
using VkInstance = void*;
using VkPhysicalDevice = void*;
using VkResult = int;
using VkAllocationCallbacks = struct VkAllocationCallbacks;
using VkSurfaceKHR = void*;

using GLFWglproc = void*;
using GLFWvkproc = void*;
using GLFWmonitor = struct GLFWmonitor;
using GLFWwindow = struct GLFWwindow;
using GLFWcursor = struct GLFWcursor;

using GLFWallocatefun = upcall void* GLFWAllocateFun(size_t size, void* user);
using GLFWreallocatefun = upcall void* GLFWReallocateFun(void* block, size_t size, void* user);
using GLFWdeallocatefun = upcall void GLFWDeallocateFun(void* block, void* user);
using GLFWerrorfun = upcall void GLFWErrorFun(int error_code, const char* description);
using GLFWwindowposfun = upcall void GLFWWindowPosFun(GLFWwindow* window, int xpos, int ypos);
using GLFWwindowsizefun = upcall void GLFWWindowSizeFun(GLFWwindow* window, int width, int height);
using GLFWwindowclosefun = upcall void GLFWWindowCloseFun(GLFWwindow* window);
using GLFWwindowrefreshfun = upcall void GLFWWindowRefreshFun(GLFWwindow* window);
using GLFWwindowfocusfun = upcall void GLFWWindowFocusFun(GLFWwindow* window, GLFWboolean focused);
using GLFWwindowiconifyfun = upcall void GLFWWindowIconifyFun(GLFWwindow* window, GLFWboolean iconified);
using GLFWwindowmaximizefun = upcall void GLFWWindowMaximizeFun(GLFWwindow* window, GLFWboolean maximized);
using GLFWframebuffersizefun = upcall void GLFWFramebufferSizeFun(GLFWwindow* window, int width, int height);
using GLFWwindowcontentscalefun = upcall void GLFWWindowContentScaleFun(GLFWwindow* window, float xscale, float yscale);
using GLFWmousebuttonfun = upcall void GLFWMouseButtonFun(GLFWwindow* window, int button, int action, int mods);
using GLFWcursorposfun = upcall void GLFWCursorPosFun(GLFWwindow* window, double xpos, double ypos);
using GLFWcursorenterfun = upcall void GLFWCursorEnterFun(GLFWwindow* window, GLFWboolean entered);
using GLFWscrollfun = upcall void GLFWScrollFun(GLFWwindow* window, double xoffset, double yoffset);
using GLFWkeyfun = upcall void GLFWKeyFun(GLFWwindow* window, int key, int scancode, int action, int mods);
using GLFWcharfun = upcall void GLFWCharFun(GLFWwindow* window, unsigned int codepoint);
using GLFWdropfun = upcall void GLFWDropFun(GLFWwindow* window, int path_count, const char* paths[]);
using GLFWmonitorfun = upcall void GLFWMonitorFun(GLFWmonitor* monitor, int event);
using GLFWjoystickfun = upcall void GLFWJoystickFun(int jid, int event);

using GLFWvidmode = struct GLFWVidMode {
    int width;
    int height;
    int redBits;
    int greenBits;
    int blueBits;
    int refreshRate;
};
using GLFWgammaramp = struct GLFWGammaRamp {
    unsigned short* red;
    unsigned short* green;
    unsigned short* blue;
    unsigned int size;
};
using GLFWimage = struct GLFWImage {
    int width;
    int height;
    unsigned char* pixels;
};
using GLFWgamepadstate = struct GLFWGamepadState {
    unsigned char buttons[15];
    float axes[6];
};
using GLFWallocator = struct GLFWAllocator {
    GLFWallocatefun allocate;
    GLFWreallocatefun reallocate;
    GLFWdeallocatefun deallocate;
    void* user;
};

fn GLFWboolean glfwInit();
fn void glfwTerminate();
fn void glfwInitHint(int hint, int value);
fn void glfwInitAllocator(const GLFWallocator* allocator);
fn void glfwInitVulkanLoader(PFN_vkGetInstanceProcAddr loader);
fn void glfwGetVersion(int* major, int* minor, int* rev);
fn const char* glfwGetVersionString();
fn int glfwGetError(const char** description);
fn GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback);
fn int glfwGetPlatform();
fn GLFWboolean glfwPlatformSupported(int platform);
fn GLFWmonitor** glfwGetMonitors(int* count);
fn GLFWmonitor* glfwGetPrimaryMonitor();
fn void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);
fn void glfwGetMonitorWorkarea(GLFWmonitor* monitor, int* xpos, int* ypos, int* width, int* height);
fn void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM);
fn void glfwGetMonitorContentScale(GLFWmonitor* monitor, float* xscale, float* yscale);
fn const char* glfwGetMonitorName(GLFWmonitor* monitor);
fn void glfwSetMonitorUserPointer(GLFWmonitor* monitor, void* pointer);
fn void* glfwGetMonitorUserPointer(GLFWmonitor* monitor);
fn GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback);
fn const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);
fn const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
fn void glfwSetGamma(GLFWmonitor* monitor, float gamma);
fn const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
fn void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);
fn void glfwDefaultWindowHints();
fn void glfwWindowHint(int hint, int value);
fn void glfwWindowHintString(int hint, const char* value);
fn GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);
fn void glfwDestroyWindow(GLFWwindow* window);
fn GLFWboolean glfwWindowShouldClose(GLFWwindow* window);
fn void glfwSetWindowShouldClose(GLFWwindow* window, GLFWboolean value);
fn const char* glfwGetWindowTitle(GLFWwindow* window);
fn void glfwSetWindowTitle(GLFWwindow* window, const char* title);
fn void glfwSetWindowIcon(GLFWwindow* window, int count, const GLFWimage* images);
fn void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);
fn void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);
fn void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);
fn void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
fn void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom);
fn void glfwSetWindowSize(GLFWwindow* window, int width, int height);
fn void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);
fn void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom);
fn void glfwGetWindowContentScale(GLFWwindow* window, float* xscale, float* yscale);
fn float glfwGetWindowOpacity(GLFWwindow* window);
fn void glfwSetWindowOpacity(GLFWwindow* window, float opacity);
fn void glfwIconifyWindow(GLFWwindow* window);
fn void glfwRestoreWindow(GLFWwindow* window);
fn void glfwMaximizeWindow(GLFWwindow* window);
fn void glfwShowWindow(GLFWwindow* window);
fn void glfwHideWindow(GLFWwindow* window);
fn void glfwFocusWindow(GLFWwindow* window);
fn void glfwRequestWindowAttention(GLFWwindow* window);
fn GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
fn void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
fn int glfwGetWindowAttrib(GLFWwindow* window, int attrib);
fn void glfwSetWindowAttrib(GLFWwindow* window, int attrib, int value);
fn void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);
fn void* glfwGetWindowUserPointer(GLFWwindow* window);
fn GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun callback);
fn GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun callback);
fn GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun callback);
fn GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun callback);
fn GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun callback);
fn GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun callback);
fn GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow* window, GLFWwindowmaximizefun callback);
fn GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun callback);
fn GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow* window, GLFWwindowcontentscalefun callback);
fn void glfwPollEvents();
fn void glfwWaitEvents();
fn void glfwWaitEventsTimeout(double timeout);
fn void glfwPostEmptyEvent();
fn int glfwGetInputMode(GLFWwindow* window, int mode);
fn void glfwSetInputMode(GLFWwindow* window, int mode, int value);
fn GLFWboolean glfwRawMouseMotionSupported();
fn const char* glfwGetKeyName(int key, int scancode);
fn int glfwGetKeyScancode(int key);
fn int glfwGetKey(GLFWwindow* window, int key);
fn int glfwGetMouseButton(GLFWwindow* window, int button);
fn void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);
fn void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);
fn GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot);
fn GLFWcursor* glfwCreateStandardCursor(int shape);
fn void glfwDestroyCursor(GLFWcursor* cursor);
fn void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor);
fn GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun callback);
fn GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun callback);
fn GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun callback);
fn GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun callback);
fn GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun callback);
fn GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun callback);
fn GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun callback);
fn GLFWboolean glfwJoystickPresent(int jid);
fn const float* glfwGetJoystickAxes(int jid, int* count);
fn const unsigned char* glfwGetJoystickButtons(int jid, int* count);
fn const unsigned char* glfwGetJoystickHats(int jid, int* count);
fn const char* glfwGetJoystickName(int jid);
fn const char* glfwGetJoystickGUID(int jid);
fn void glfwSetJoystickUserPointer(int jid, void* pointer);
fn void* glfwGetJoystickUserPointer(int jid);
fn GLFWboolean glfwJoystickIsGamepad(int jid);
fn GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback);
fn GLFWboolean glfwUpdateGamepadMappings(const char* string);
fn const char* glfwGetGamepadName(int jid);
fn GLFWboolean glfwGetGamepadState(int jid, GLFWgamepadstate* state);
fn void glfwSetClipboardString(GLFWwindow* window, const char* string);
fn const char* glfwGetClipboardString(GLFWwindow* window);
fn double glfwGetTime();
fn void glfwSetTime(double time);
fn uint64_t glfwGetTimerValue();
fn uint64_t glfwGetTimerFrequency();
fn void glfwMakeContextCurrent(GLFWwindow* window);
fn GLFWwindow* glfwGetCurrentContext();
fn void glfwSwapBuffers(GLFWwindow* window);
fn void glfwSwapInterval(int interval);
fn GLFWboolean glfwExtensionSupported(const char* extension);
fn GLFWglproc glfwGetProcAddress(const char* procname);
fn GLFWboolean glfwVulkanSupported();
fn const char** glfwGetRequiredInstanceExtensions(uint32_t* count);
fn GLFWvkproc glfwGetInstanceProcAddress(VkInstance instance, const char* procname);
fn GLFWboolean glfwGetPhysicalDevicePresentationSupport(VkInstance instance, VkPhysicalDevice device, uint32_t queuefamily);
fn VkResult glfwCreateWindowSurface(VkInstance instance, GLFWwindow* window, const VkAllocationCallbacks* allocator, VkSurfaceKHR* surface);
