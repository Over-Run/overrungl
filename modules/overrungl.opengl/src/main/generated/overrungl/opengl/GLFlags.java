/*
 * MIT License
 *
 * Copyright (c) 2022-2025 Overrun Organization
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 */

// This file is auto-generated. DO NOT EDIT!
package overrungl.opengl;

public final class GLFlags {
    public final boolean GL10, GL11, GL12, GL13, GL14, GL15;
    public final boolean GL20, GL21;
    public final boolean GL30, GL31, GL32, GL33;
    public final boolean GL40, GL41, GL42, GL43, GL44, GL45, GL46;
    public final boolean GL_3DFX_multisample;
    public final boolean GL_3DFX_tbuffer;
    public final boolean GL_3DFX_texture_compression_FXT1;
    public final boolean GL_AMD_blend_minmax_factor;
    public final boolean GL_AMD_conservative_depth;
    public final boolean GL_AMD_debug_output;
    public final boolean GL_AMD_depth_clamp_separate;
    public final boolean GL_AMD_draw_buffers_blend;
    public final boolean GL_AMD_framebuffer_multisample_advanced;
    public final boolean GL_AMD_framebuffer_sample_positions;
    public final boolean GL_AMD_gcn_shader;
    public final boolean GL_AMD_gpu_shader_half_float;
    public final boolean GL_AMD_gpu_shader_int16;
    public final boolean GL_AMD_gpu_shader_int64;
    public final boolean GL_AMD_interleaved_elements;
    public final boolean GL_AMD_multi_draw_indirect;
    public final boolean GL_AMD_name_gen_delete;
    public final boolean GL_AMD_occlusion_query_event;
    public final boolean GL_AMD_performance_monitor;
    public final boolean GL_AMD_pinned_memory;
    public final boolean GL_AMD_query_buffer_object;
    public final boolean GL_AMD_sample_positions;
    public final boolean GL_AMD_seamless_cubemap_per_texture;
    public final boolean GL_AMD_shader_atomic_counter_ops;
    public final boolean GL_AMD_shader_ballot;
    public final boolean GL_AMD_shader_gpu_shader_half_float_fetch;
    public final boolean GL_AMD_shader_image_load_store_lod;
    public final boolean GL_AMD_shader_stencil_export;
    public final boolean GL_AMD_shader_trinary_minmax;
    public final boolean GL_AMD_shader_explicit_vertex_parameter;
    public final boolean GL_AMD_sparse_texture;
    public final boolean GL_AMD_stencil_operation_extended;
    public final boolean GL_AMD_texture_gather_bias_lod;
    public final boolean GL_AMD_texture_texture4;
    public final boolean GL_AMD_transform_feedback3_lines_triangles;
    public final boolean GL_AMD_transform_feedback4;
    public final boolean GL_AMD_vertex_shader_layer;
    public final boolean GL_AMD_vertex_shader_tessellator;
    public final boolean GL_AMD_vertex_shader_viewport_index;
    public final boolean GL_APPLE_aux_depth_stencil;
    public final boolean GL_APPLE_client_storage;
    public final boolean GL_APPLE_element_array;
    public final boolean GL_APPLE_fence;
    public final boolean GL_APPLE_float_pixels;
    public final boolean GL_APPLE_flush_buffer_range;
    public final boolean GL_APPLE_object_purgeable;
    public final boolean GL_APPLE_rgb_422;
    public final boolean GL_APPLE_row_bytes;
    public final boolean GL_APPLE_specular_vector;
    public final boolean GL_APPLE_texture_range;
    public final boolean GL_APPLE_transform_hint;
    public final boolean GL_APPLE_vertex_array_object;
    public final boolean GL_APPLE_vertex_array_range;
    public final boolean GL_APPLE_vertex_program_evaluators;
    public final boolean GL_APPLE_ycbcr_422;
    public final boolean GL_ARB_ES2_compatibility;
    public final boolean GL_ARB_ES3_1_compatibility;
    public final boolean GL_ARB_ES3_2_compatibility;
    public final boolean GL_ARB_ES3_compatibility;
    public final boolean GL_ARB_arrays_of_arrays;
    public final boolean GL_ARB_base_instance;
    public final boolean GL_ARB_bindless_texture;
    public final boolean GL_ARB_blend_func_extended;
    public final boolean GL_ARB_buffer_storage;
    public final boolean GL_ARB_cl_event;
    public final boolean GL_ARB_clear_buffer_object;
    public final boolean GL_ARB_clear_texture;
    public final boolean GL_ARB_clip_control;
    public final boolean GL_ARB_color_buffer_float;
    public final boolean GL_ARB_compatibility;
    public final boolean GL_ARB_compressed_texture_pixel_storage;
    public final boolean GL_ARB_compute_shader;
    public final boolean GL_ARB_compute_variable_group_size;
    public final boolean GL_ARB_conditional_render_inverted;
    public final boolean GL_ARB_conservative_depth;
    public final boolean GL_ARB_copy_buffer;
    public final boolean GL_ARB_copy_image;
    public final boolean GL_ARB_cull_distance;
    public final boolean GL_ARB_debug_output;
    public final boolean GL_ARB_depth_buffer_float;
    public final boolean GL_ARB_depth_clamp;
    public final boolean GL_ARB_depth_texture;
    public final boolean GL_ARB_derivative_control;
    public final boolean GL_ARB_direct_state_access;
    public final boolean GL_ARB_draw_buffers;
    public final boolean GL_ARB_draw_buffers_blend;
    public final boolean GL_ARB_draw_elements_base_vertex;
    public final boolean GL_ARB_draw_indirect;
    public final boolean GL_ARB_draw_instanced;
    public final boolean GL_ARB_enhanced_layouts;
    public final boolean GL_ARB_explicit_attrib_location;
    public final boolean GL_ARB_explicit_uniform_location;
    public final boolean GL_ARB_fragment_coord_conventions;
    public final boolean GL_ARB_fragment_layer_viewport;
    public final boolean GL_ARB_fragment_program;
    public final boolean GL_ARB_fragment_program_shadow;
    public final boolean GL_ARB_fragment_shader;
    public final boolean GL_ARB_fragment_shader_interlock;
    public final boolean GL_ARB_framebuffer_no_attachments;
    public final boolean GL_ARB_framebuffer_object;
    public final boolean GL_ARB_framebuffer_sRGB;
    public final boolean GL_ARB_geometry_shader4;
    public final boolean GL_ARB_get_program_binary;
    public final boolean GL_ARB_get_texture_sub_image;
    public final boolean GL_ARB_gl_spirv;
    public final boolean GL_ARB_gpu_shader5;
    public final boolean GL_ARB_gpu_shader_fp64;
    public final boolean GL_ARB_gpu_shader_int64;
    public final boolean GL_ARB_half_float_pixel;
    public final boolean GL_ARB_half_float_vertex;
    public final boolean GL_ARB_imaging;
    public final boolean GL_ARB_indirect_parameters;
    public final boolean GL_ARB_instanced_arrays;
    public final boolean GL_ARB_internalformat_query;
    public final boolean GL_ARB_internalformat_query2;
    public final boolean GL_ARB_invalidate_subdata;
    public final boolean GL_ARB_map_buffer_alignment;
    public final boolean GL_ARB_map_buffer_range;
    public final boolean GL_ARB_matrix_palette;
    public final boolean GL_ARB_multi_bind;
    public final boolean GL_ARB_multi_draw_indirect;
    public final boolean GL_ARB_multisample;
    public final boolean GL_ARB_multitexture;
    public final boolean GL_ARB_occlusion_query;
    public final boolean GL_ARB_occlusion_query2;
    public final boolean GL_ARB_parallel_shader_compile;
    public final boolean GL_ARB_pipeline_statistics_query;
    public final boolean GL_ARB_pixel_buffer_object;
    public final boolean GL_ARB_point_parameters;
    public final boolean GL_ARB_point_sprite;
    public final boolean GL_ARB_polygon_offset_clamp;
    public final boolean GL_ARB_post_depth_coverage;
    public final boolean GL_ARB_program_interface_query;
    public final boolean GL_ARB_provoking_vertex;
    public final boolean GL_ARB_query_buffer_object;
    public final boolean GL_ARB_robust_buffer_access_behavior;
    public final boolean GL_ARB_robustness;
    public final boolean GL_ARB_robustness_isolation;
    public final boolean GL_ARB_sample_locations;
    public final boolean GL_ARB_sample_shading;
    public final boolean GL_ARB_sampler_objects;
    public final boolean GL_ARB_seamless_cube_map;
    public final boolean GL_ARB_seamless_cubemap_per_texture;
    public final boolean GL_ARB_separate_shader_objects;
    public final boolean GL_ARB_shader_atomic_counter_ops;
    public final boolean GL_ARB_shader_atomic_counters;
    public final boolean GL_ARB_shader_ballot;
    public final boolean GL_ARB_shader_bit_encoding;
    public final boolean GL_ARB_shader_clock;
    public final boolean GL_ARB_shader_draw_parameters;
    public final boolean GL_ARB_shader_group_vote;
    public final boolean GL_ARB_shader_image_load_store;
    public final boolean GL_ARB_shader_image_size;
    public final boolean GL_ARB_shader_objects;
    public final boolean GL_ARB_shader_precision;
    public final boolean GL_ARB_shader_stencil_export;
    public final boolean GL_ARB_shader_storage_buffer_object;
    public final boolean GL_ARB_shader_subroutine;
    public final boolean GL_ARB_shader_texture_image_samples;
    public final boolean GL_ARB_shader_texture_lod;
    public final boolean GL_ARB_shader_viewport_layer_array;
    public final boolean GL_ARB_shading_language_100;
    public final boolean GL_ARB_shading_language_420pack;
    public final boolean GL_ARB_shading_language_include;
    public final boolean GL_ARB_shading_language_packing;
    public final boolean GL_ARB_shadow;
    public final boolean GL_ARB_shadow_ambient;
    public final boolean GL_ARB_sparse_buffer;
    public final boolean GL_ARB_sparse_texture;
    public final boolean GL_ARB_sparse_texture2;
    public final boolean GL_ARB_sparse_texture_clamp;
    public final boolean GL_ARB_spirv_extensions;
    public final boolean GL_ARB_stencil_texturing;
    public final boolean GL_ARB_sync;
    public final boolean GL_ARB_tessellation_shader;
    public final boolean GL_ARB_texture_barrier;
    public final boolean GL_ARB_texture_border_clamp;
    public final boolean GL_ARB_texture_buffer_object;
    public final boolean GL_ARB_texture_buffer_object_rgb32;
    public final boolean GL_ARB_texture_buffer_range;
    public final boolean GL_ARB_texture_compression;
    public final boolean GL_ARB_texture_compression_bptc;
    public final boolean GL_ARB_texture_compression_rgtc;
    public final boolean GL_ARB_texture_cube_map;
    public final boolean GL_ARB_texture_cube_map_array;
    public final boolean GL_ARB_texture_env_add;
    public final boolean GL_ARB_texture_env_combine;
    public final boolean GL_ARB_texture_env_crossbar;
    public final boolean GL_ARB_texture_env_dot3;
    public final boolean GL_ARB_texture_filter_anisotropic;
    public final boolean GL_ARB_texture_filter_minmax;
    public final boolean GL_ARB_texture_float;
    public final boolean GL_ARB_texture_gather;
    public final boolean GL_ARB_texture_mirror_clamp_to_edge;
    public final boolean GL_ARB_texture_mirrored_repeat;
    public final boolean GL_ARB_texture_multisample;
    public final boolean GL_ARB_texture_non_power_of_two;
    public final boolean GL_ARB_texture_query_levels;
    public final boolean GL_ARB_texture_query_lod;
    public final boolean GL_ARB_texture_rectangle;
    public final boolean GL_ARB_texture_rg;
    public final boolean GL_ARB_texture_rgb10_a2ui;
    public final boolean GL_ARB_texture_stencil8;
    public final boolean GL_ARB_texture_storage;
    public final boolean GL_ARB_texture_storage_multisample;
    public final boolean GL_ARB_texture_swizzle;
    public final boolean GL_ARB_texture_view;
    public final boolean GL_ARB_timer_query;
    public final boolean GL_ARB_transform_feedback2;
    public final boolean GL_ARB_transform_feedback3;
    public final boolean GL_ARB_transform_feedback_instanced;
    public final boolean GL_ARB_transform_feedback_overflow_query;
    public final boolean GL_ARB_transpose_matrix;
    public final boolean GL_ARB_uniform_buffer_object;
    public final boolean GL_ARB_vertex_array_bgra;
    public final boolean GL_ARB_vertex_array_object;
    public final boolean GL_ARB_vertex_attrib_64bit;
    public final boolean GL_ARB_vertex_attrib_binding;
    public final boolean GL_ARB_vertex_blend;
    public final boolean GL_ARB_vertex_buffer_object;
    public final boolean GL_ARB_vertex_program;
    public final boolean GL_ARB_vertex_shader;
    public final boolean GL_ARB_vertex_type_10f_11f_11f_rev;
    public final boolean GL_ARB_vertex_type_2_10_10_10_rev;
    public final boolean GL_ARB_viewport_array;
    public final boolean GL_ARB_window_pos;
    public final boolean GL_ATI_draw_buffers;
    public final boolean GL_ATI_element_array;
    public final boolean GL_ATI_envmap_bumpmap;
    public final boolean GL_ATI_fragment_shader;
    public final boolean GL_ATI_map_object_buffer;
    public final boolean GL_ATI_meminfo;
    public final boolean GL_ATI_pixel_format_float;
    public final boolean GL_ATI_pn_triangles;
    public final boolean GL_ATI_separate_stencil;
    public final boolean GL_ATI_text_fragment_shader;
    public final boolean GL_ATI_texture_env_combine3;
    public final boolean GL_ATI_texture_float;
    public final boolean GL_ATI_texture_mirror_once;
    public final boolean GL_ATI_vertex_array_object;
    public final boolean GL_ATI_vertex_attrib_array_object;
    public final boolean GL_ATI_vertex_streams;
    public final boolean GL_EXT_422_pixels;
    public final boolean GL_EXT_EGL_image_storage;
    public final boolean GL_EXT_EGL_sync;
    public final boolean GL_EXT_abgr;
    public final boolean GL_EXT_bgra;
    public final boolean GL_EXT_bindable_uniform;
    public final boolean GL_EXT_blend_color;
    public final boolean GL_EXT_blend_equation_separate;
    public final boolean GL_EXT_blend_func_separate;
    public final boolean GL_EXT_blend_logic_op;
    public final boolean GL_EXT_blend_minmax;
    public final boolean GL_EXT_blend_subtract;
    public final boolean GL_EXT_clip_volume_hint;
    public final boolean GL_EXT_cmyka;
    public final boolean GL_EXT_color_subtable;
    public final boolean GL_EXT_compiled_vertex_array;
    public final boolean GL_EXT_convolution;
    public final boolean GL_EXT_coordinate_frame;
    public final boolean GL_EXT_copy_texture;
    public final boolean GL_EXT_cull_vertex;
    public final boolean GL_EXT_debug_label;
    public final boolean GL_EXT_debug_marker;
    public final boolean GL_EXT_depth_bounds_test;
    public final boolean GL_EXT_direct_state_access;
    public final boolean GL_EXT_draw_buffers2;
    public final boolean GL_EXT_draw_instanced;
    public final boolean GL_EXT_draw_range_elements;
    public final boolean GL_EXT_external_buffer;
    public final boolean GL_EXT_fog_coord;
    public final boolean GL_EXT_framebuffer_blit;
    public final boolean GL_EXT_framebuffer_blit_layers;
    public final boolean GL_EXT_framebuffer_multisample;
    public final boolean GL_EXT_framebuffer_multisample_blit_scaled;
    public final boolean GL_EXT_framebuffer_object;
    public final boolean GL_EXT_framebuffer_sRGB;
    public final boolean GL_EXT_geometry_shader4;
    public final boolean GL_EXT_gpu_program_parameters;
    public final boolean GL_EXT_gpu_shader4;
    public final boolean GL_EXT_histogram;
    public final boolean GL_EXT_index_array_formats;
    public final boolean GL_EXT_index_func;
    public final boolean GL_EXT_index_material;
    public final boolean GL_EXT_index_texture;
    public final boolean GL_EXT_light_texture;
    public final boolean GL_EXT_memory_object;
    public final boolean GL_EXT_memory_object_fd;
    public final boolean GL_EXT_memory_object_win32;
    public final boolean GL_EXT_misc_attribute;
    public final boolean GL_EXT_multi_draw_arrays;
    public final boolean GL_EXT_multisample;
    public final boolean GL_EXT_multiview_tessellation_geometry_shader;
    public final boolean GL_EXT_multiview_texture_multisample;
    public final boolean GL_EXT_multiview_timer_query;
    public final boolean GL_EXT_packed_depth_stencil;
    public final boolean GL_EXT_packed_float;
    public final boolean GL_EXT_packed_pixels;
    public final boolean GL_EXT_paletted_texture;
    public final boolean GL_EXT_pixel_buffer_object;
    public final boolean GL_EXT_pixel_transform;
    public final boolean GL_EXT_pixel_transform_color_table;
    public final boolean GL_EXT_point_parameters;
    public final boolean GL_EXT_polygon_offset;
    public final boolean GL_EXT_polygon_offset_clamp;
    public final boolean GL_EXT_post_depth_coverage;
    public final boolean GL_EXT_provoking_vertex;
    public final boolean GL_EXT_raster_multisample;
    public final boolean GL_EXT_rescale_normal;
    public final boolean GL_EXT_semaphore;
    public final boolean GL_EXT_semaphore_fd;
    public final boolean GL_EXT_semaphore_win32;
    public final boolean GL_EXT_secondary_color;
    public final boolean GL_EXT_separate_shader_objects;
    public final boolean GL_EXT_separate_specular_color;
    public final boolean GL_EXT_shader_framebuffer_fetch;
    public final boolean GL_EXT_shader_framebuffer_fetch_non_coherent;
    public final boolean GL_EXT_shader_image_load_formatted;
    public final boolean GL_EXT_shader_image_load_store;
    public final boolean GL_EXT_shader_integer_mix;
    public final boolean GL_EXT_shader_samples_identical;
    public final boolean GL_EXT_shadow_funcs;
    public final boolean GL_EXT_shared_texture_palette;
    public final boolean GL_EXT_sparse_texture2;
    public final boolean GL_EXT_stencil_clear_tag;
    public final boolean GL_EXT_stencil_two_side;
    public final boolean GL_EXT_stencil_wrap;
    public final boolean GL_EXT_subtexture;
    public final boolean GL_EXT_texture;
    public final boolean GL_EXT_texture3D;
    public final boolean GL_EXT_texture_array;
    public final boolean GL_EXT_texture_buffer_object;
    public final boolean GL_EXT_texture_compression_latc;
    public final boolean GL_EXT_texture_compression_rgtc;
    public final boolean GL_EXT_texture_compression_s3tc;
    public final boolean GL_EXT_texture_cube_map;
    public final boolean GL_EXT_texture_env_add;
    public final boolean GL_EXT_texture_env_combine;
    public final boolean GL_EXT_texture_env_dot3;
    public final boolean GL_EXT_texture_filter_anisotropic;
    public final boolean GL_EXT_texture_filter_minmax;
    public final boolean GL_EXT_texture_integer;
    public final boolean GL_EXT_texture_lod_bias;
    public final boolean GL_EXT_texture_mirror_clamp;
    public final boolean GL_EXT_texture_object;
    public final boolean GL_EXT_texture_perturb_normal;
    public final boolean GL_EXT_texture_sRGB;
    public final boolean GL_EXT_texture_sRGB_R8;
    public final boolean GL_EXT_texture_sRGB_RG8;
    public final boolean GL_EXT_texture_sRGB_decode;
    public final boolean GL_EXT_texture_shadow_lod;
    public final boolean GL_EXT_texture_shared_exponent;
    public final boolean GL_EXT_texture_snorm;
    public final boolean GL_EXT_texture_storage;
    public final boolean GL_EXT_texture_swizzle;
    public final boolean GL_NV_timeline_semaphore;
    public final boolean GL_EXT_timer_query;
    public final boolean GL_EXT_transform_feedback;
    public final boolean GL_EXT_vertex_array;
    public final boolean GL_EXT_vertex_array_bgra;
    public final boolean GL_EXT_vertex_attrib_64bit;
    public final boolean GL_EXT_vertex_shader;
    public final boolean GL_EXT_vertex_weighting;
    public final boolean GL_EXT_win32_keyed_mutex;
    public final boolean GL_EXT_window_rectangles;
    public final boolean GL_EXT_x11_sync_object;
    public final boolean GL_GREMEDY_frame_terminator;
    public final boolean GL_GREMEDY_string_marker;
    public final boolean GL_HP_convolution_border_modes;
    public final boolean GL_HP_image_transform;
    public final boolean GL_HP_occlusion_test;
    public final boolean GL_HP_texture_lighting;
    public final boolean GL_IBM_cull_vertex;
    public final boolean GL_IBM_multimode_draw_arrays;
    public final boolean GL_IBM_rasterpos_clip;
    public final boolean GL_IBM_static_data;
    public final boolean GL_IBM_texture_mirrored_repeat;
    public final boolean GL_IBM_vertex_array_lists;
    public final boolean GL_INGR_blend_func_separate;
    public final boolean GL_INGR_color_clamp;
    public final boolean GL_INGR_interlace_read;
    public final boolean GL_INTEL_conservative_rasterization;
    public final boolean GL_INTEL_fragment_shader_ordering;
    public final boolean GL_INTEL_framebuffer_CMAA;
    public final boolean GL_INTEL_map_texture;
    public final boolean GL_INTEL_blackhole_render;
    public final boolean GL_INTEL_parallel_arrays;
    public final boolean GL_INTEL_performance_query;
    public final boolean GL_KHR_blend_equation_advanced;
    public final boolean GL_KHR_blend_equation_advanced_coherent;
    public final boolean GL_KHR_context_flush_control;
    public final boolean GL_KHR_debug;
    public final boolean GL_KHR_no_error;
    public final boolean GL_KHR_robust_buffer_access_behavior;
    public final boolean GL_KHR_robustness;
    public final boolean GL_KHR_shader_subgroup;
    public final boolean GL_KHR_texture_compression_astc_hdr;
    public final boolean GL_KHR_texture_compression_astc_ldr;
    public final boolean GL_KHR_texture_compression_astc_sliced_3d;
    public final boolean GL_KHR_parallel_shader_compile;
    public final boolean GL_MESAX_texture_stack;
    public final boolean GL_MESA_framebuffer_flip_x;
    public final boolean GL_MESA_framebuffer_flip_y;
    public final boolean GL_MESA_framebuffer_swap_xy;
    public final boolean GL_MESA_pack_invert;
    public final boolean GL_MESA_program_binary_formats;
    public final boolean GL_MESA_resize_buffers;
    public final boolean GL_MESA_shader_integer_functions;
    public final boolean GL_MESA_texture_const_bandwidth;
    public final boolean GL_MESA_tile_raster_order;
    public final boolean GL_MESA_window_pos;
    public final boolean GL_MESA_ycbcr_texture;
    public final boolean GL_NVX_blend_equation_advanced_multi_draw_buffers;
    public final boolean GL_NVX_conditional_render;
    public final boolean GL_NVX_gpu_memory_info;
    public final boolean GL_NVX_linked_gpu_multicast;
    public final boolean GL_NV_alpha_to_coverage_dither_control;
    public final boolean GL_NV_bindless_multi_draw_indirect;
    public final boolean GL_NV_bindless_multi_draw_indirect_count;
    public final boolean GL_NV_bindless_texture;
    public final boolean GL_NV_blend_equation_advanced;
    public final boolean GL_NV_blend_equation_advanced_coherent;
    public final boolean GL_NV_blend_minmax_factor;
    public final boolean GL_NV_blend_square;
    public final boolean GL_NV_clip_space_w_scaling;
    public final boolean GL_NV_command_list;
    public final boolean GL_NV_compute_program5;
    public final boolean GL_NV_compute_shader_derivatives;
    public final boolean GL_NV_conditional_render;
    public final boolean GL_NV_conservative_raster;
    public final boolean GL_NV_conservative_raster_dilate;
    public final boolean GL_NV_conservative_raster_pre_snap;
    public final boolean GL_NV_conservative_raster_pre_snap_triangles;
    public final boolean GL_NV_conservative_raster_underestimation;
    public final boolean GL_NV_copy_depth_to_color;
    public final boolean GL_NV_copy_image;
    public final boolean GL_NV_deep_texture3D;
    public final boolean GL_NV_depth_buffer_float;
    public final boolean GL_NV_depth_clamp;
    public final boolean GL_NV_draw_texture;
    public final boolean GL_NV_draw_vulkan_image;
    public final boolean GL_NV_evaluators;
    public final boolean GL_NV_explicit_multisample;
    public final boolean GL_NV_fence;
    public final boolean GL_NV_fill_rectangle;
    public final boolean GL_NV_float_buffer;
    public final boolean GL_NV_fog_distance;
    public final boolean GL_NV_fragment_coverage_to_color;
    public final boolean GL_NV_fragment_program;
    public final boolean GL_NV_fragment_program2;
    public final boolean GL_NV_fragment_program4;
    public final boolean GL_NV_fragment_program_option;
    public final boolean GL_NV_fragment_shader_barycentric;
    public final boolean GL_NV_fragment_shader_interlock;
    public final boolean GL_NV_framebuffer_mixed_samples;
    public final boolean GL_NV_framebuffer_multisample_coverage;
    public final boolean GL_NV_geometry_program4;
    public final boolean GL_NV_geometry_shader4;
    public final boolean GL_NV_geometry_shader_passthrough;
    public final boolean GL_NV_gpu_program4;
    public final boolean GL_NV_gpu_program5;
    public final boolean GL_NV_gpu_program5_mem_extended;
    public final boolean GL_NV_gpu_shader5;
    public final boolean GL_NV_half_float;
    public final boolean GL_NV_internalformat_sample_query;
    public final boolean GL_NV_light_max_exponent;
    public final boolean GL_NV_gpu_multicast;
    public final boolean GL_NVX_gpu_multicast2;
    public final boolean GL_NVX_progress_fence;
    public final boolean GL_NV_memory_attachment;
    public final boolean GL_NV_memory_object_sparse;
    public final boolean GL_NV_mesh_shader;
    public final boolean GL_NV_multisample_coverage;
    public final boolean GL_NV_multisample_filter_hint;
    public final boolean GL_NV_occlusion_query;
    public final boolean GL_NV_packed_depth_stencil;
    public final boolean GL_NV_parameter_buffer_object;
    public final boolean GL_NV_parameter_buffer_object2;
    public final boolean GL_NV_path_rendering;
    public final boolean GL_NV_path_rendering_shared_edge;
    public final boolean GL_NV_pixel_data_range;
    public final boolean GL_NV_point_sprite;
    public final boolean GL_NV_present_video;
    public final boolean GL_NV_primitive_restart;
    public final boolean GL_NV_primitive_shading_rate;
    public final boolean GL_NV_query_resource;
    public final boolean GL_NV_query_resource_tag;
    public final boolean GL_NV_register_combiners;
    public final boolean GL_NV_register_combiners2;
    public final boolean GL_NV_representative_fragment_test;
    public final boolean GL_NV_robustness_video_memory_purge;
    public final boolean GL_NV_sample_locations;
    public final boolean GL_NV_sample_mask_override_coverage;
    public final boolean GL_NV_scissor_exclusive;
    public final boolean GL_NV_shader_atomic_counters;
    public final boolean GL_NV_shader_atomic_float;
    public final boolean GL_NV_shader_atomic_float64;
    public final boolean GL_NV_shader_atomic_fp16_vector;
    public final boolean GL_NV_shader_atomic_int64;
    public final boolean GL_NV_shader_buffer_load;
    public final boolean GL_NV_shader_buffer_store;
    public final boolean GL_NV_shader_storage_buffer_object;
    public final boolean GL_NV_shader_subgroup_partitioned;
    public final boolean GL_NV_shader_texture_footprint;
    public final boolean GL_NV_shader_thread_group;
    public final boolean GL_NV_shader_thread_shuffle;
    public final boolean GL_NV_shading_rate_image;
    public final boolean GL_NV_stereo_view_rendering;
    public final boolean GL_NV_tessellation_program5;
    public final boolean GL_NV_texgen_emboss;
    public final boolean GL_NV_texgen_reflection;
    public final boolean GL_NV_texture_barrier;
    public final boolean GL_NV_texture_compression_vtc;
    public final boolean GL_NV_texture_env_combine4;
    public final boolean GL_NV_texture_expand_normal;
    public final boolean GL_NV_texture_multisample;
    public final boolean GL_NV_texture_rectangle;
    public final boolean GL_NV_texture_rectangle_compressed;
    public final boolean GL_NV_texture_shader;
    public final boolean GL_NV_texture_shader2;
    public final boolean GL_NV_texture_shader3;
    public final boolean GL_NV_transform_feedback;
    public final boolean GL_NV_transform_feedback2;
    public final boolean GL_NV_uniform_buffer_std430_layout;
    public final boolean GL_NV_uniform_buffer_unified_memory;
    public final boolean GL_NV_vdpau_interop;
    public final boolean GL_NV_vdpau_interop2;
    public final boolean GL_NV_vertex_array_range;
    public final boolean GL_NV_vertex_array_range2;
    public final boolean GL_NV_vertex_attrib_integer_64bit;
    public final boolean GL_NV_vertex_buffer_unified_memory;
    public final boolean GL_NV_vertex_program;
    public final boolean GL_NV_vertex_program1_1;
    public final boolean GL_NV_vertex_program2;
    public final boolean GL_NV_vertex_program2_option;
    public final boolean GL_NV_vertex_program3;
    public final boolean GL_NV_vertex_program4;
    public final boolean GL_NV_video_capture;
    public final boolean GL_NV_viewport_array2;
    public final boolean GL_NV_viewport_swizzle;
    public final boolean GL_OES_byte_coordinates;
    public final boolean GL_OES_compressed_paletted_texture;
    public final boolean GL_OES_fixed_point;
    public final boolean GL_OES_query_matrix;
    public final boolean GL_OES_read_format;
    public final boolean GL_OES_single_precision;
    public final boolean GL_OML_interlace;
    public final boolean GL_OML_resample;
    public final boolean GL_OML_subsample;
    public final boolean GL_OVR_multiview;
    public final boolean GL_OVR_multiview2;
    public final boolean GL_PGI_misc_hints;
    public final boolean GL_PGI_vertex_hints;
    public final boolean GL_REND_screen_coordinates;
    public final boolean GL_S3_s3tc;
    public final boolean GL_SGIS_detail_texture;
    public final boolean GL_SGIS_fog_function;
    public final boolean GL_SGIS_generate_mipmap;
    public final boolean GL_SGIS_multisample;
    public final boolean GL_SGIS_pixel_texture;
    public final boolean GL_SGIS_point_line_texgen;
    public final boolean GL_SGIS_point_parameters;
    public final boolean GL_SGIS_sharpen_texture;
    public final boolean GL_SGIS_texture4D;
    public final boolean GL_SGIS_texture_border_clamp;
    public final boolean GL_SGIS_texture_color_mask;
    public final boolean GL_SGIS_texture_edge_clamp;
    public final boolean GL_SGIS_texture_filter4;
    public final boolean GL_SGIS_texture_lod;
    public final boolean GL_SGIS_texture_select;
    public final boolean GL_SGIX_async;
    public final boolean GL_SGIX_async_histogram;
    public final boolean GL_SGIX_async_pixel;
    public final boolean GL_SGIX_blend_alpha_minmax;
    public final boolean GL_SGIX_calligraphic_fragment;
    public final boolean GL_SGIX_clipmap;
    public final boolean GL_SGIX_convolution_accuracy;
    public final boolean GL_SGIX_depth_pass_instrument;
    public final boolean GL_SGIX_depth_texture;
    public final boolean GL_SGIX_flush_raster;
    public final boolean GL_SGIX_fog_offset;
    public final boolean GL_SGIX_fragment_lighting;
    public final boolean GL_SGIX_framezoom;
    public final boolean GL_SGIX_igloo_interface;
    public final boolean GL_SGIX_instruments;
    public final boolean GL_SGIX_interlace;
    public final boolean GL_SGIX_ir_instrument1;
    public final boolean GL_SGIX_list_priority;
    public final boolean GL_SGIX_pixel_texture;
    public final boolean GL_SGIX_pixel_tiles;
    public final boolean GL_SGIX_polynomial_ffd;
    public final boolean GL_SGIX_reference_plane;
    public final boolean GL_SGIX_resample;
    public final boolean GL_SGIX_scalebias_hint;
    public final boolean GL_SGIX_shadow;
    public final boolean GL_SGIX_shadow_ambient;
    public final boolean GL_SGIX_sprite;
    public final boolean GL_SGIX_subsample;
    public final boolean GL_SGIX_tag_sample_buffer;
    public final boolean GL_SGIX_texture_add_env;
    public final boolean GL_SGIX_texture_coordinate_clamp;
    public final boolean GL_SGIX_texture_lod_bias;
    public final boolean GL_SGIX_texture_multi_buffer;
    public final boolean GL_SGIX_texture_scale_bias;
    public final boolean GL_SGIX_vertex_preclip;
    public final boolean GL_SGIX_ycrcb;
    public final boolean GL_SGIX_ycrcb_subsample;
    public final boolean GL_SGIX_ycrcba;
    public final boolean GL_SGI_color_matrix;
    public final boolean GL_SGI_color_table;
    public final boolean GL_SGI_texture_color_table;
    public final boolean GL_SUNX_constant_data;
    public final boolean GL_SUN_convolution_border_modes;
    public final boolean GL_SUN_global_alpha;
    public final boolean GL_SUN_mesh_array;
    public final boolean GL_SUN_slice_accum;
    public final boolean GL_SUN_triangle_list;
    public final boolean GL_SUN_vertex;
    public final boolean GL_WIN_phong_shading;
    public final boolean GL_WIN_specular_fog;

    public GLFlags(GLLoadFunc func) {
        var loader = new GLLoader(func);
        int version = loader.findCoreGL();
        int major = GLLoader.versionMajor(version), minor = GLLoader.versionMinor(version);
        GL10 = (major == 1 && minor >= 0) || major > 1;
        GL11 = (major == 1 && minor >= 1) || major > 1;
        GL12 = (major == 1 && minor >= 2) || major > 1;
        GL13 = (major == 1 && minor >= 3) || major > 1;
        GL14 = (major == 1 && minor >= 4) || major > 1;
        GL15 = (major == 1 && minor >= 5) || major > 1;
        GL20 = (major == 2 && minor >= 0) || major > 2;
        GL21 = (major == 2 && minor >= 1) || major > 2;
        GL30 = (major == 3 && minor >= 0) || major > 3;
        GL31 = (major == 3 && minor >= 1) || major > 3;
        GL32 = (major == 3 && minor >= 2) || major > 3;
        GL33 = (major == 3 && minor >= 3) || major > 3;
        GL40 = (major == 4 && minor >= 0) || major > 4;
        GL41 = (major == 4 && minor >= 1) || major > 4;
        GL42 = (major == 4 && minor >= 2) || major > 4;
        GL43 = (major == 4 && minor >= 3) || major > 4;
        GL44 = (major == 4 && minor >= 4) || major > 4;
        GL45 = (major == 4 && minor >= 5) || major > 4;
        GL46 = (major == 4 && minor >= 6) || major > 4;
        var exts = loader.getExtensions(version);
        GL_3DFX_multisample = loader.hasExtension(version, exts, "GL_3DFX_multisample");
        GL_3DFX_tbuffer = loader.hasExtension(version, exts, "GL_3DFX_tbuffer");
        GL_3DFX_texture_compression_FXT1 = loader.hasExtension(version, exts, "GL_3DFX_texture_compression_FXT1");
        GL_AMD_blend_minmax_factor = loader.hasExtension(version, exts, "GL_AMD_blend_minmax_factor");
        GL_AMD_conservative_depth = loader.hasExtension(version, exts, "GL_AMD_conservative_depth");
        GL_AMD_debug_output = loader.hasExtension(version, exts, "GL_AMD_debug_output");
        GL_AMD_depth_clamp_separate = loader.hasExtension(version, exts, "GL_AMD_depth_clamp_separate");
        GL_AMD_draw_buffers_blend = loader.hasExtension(version, exts, "GL_AMD_draw_buffers_blend");
        GL_AMD_framebuffer_multisample_advanced = loader.hasExtension(version, exts, "GL_AMD_framebuffer_multisample_advanced");
        GL_AMD_framebuffer_sample_positions = loader.hasExtension(version, exts, "GL_AMD_framebuffer_sample_positions");
        GL_AMD_gcn_shader = loader.hasExtension(version, exts, "GL_AMD_gcn_shader");
        GL_AMD_gpu_shader_half_float = loader.hasExtension(version, exts, "GL_AMD_gpu_shader_half_float");
        GL_AMD_gpu_shader_int16 = loader.hasExtension(version, exts, "GL_AMD_gpu_shader_int16");
        GL_AMD_gpu_shader_int64 = loader.hasExtension(version, exts, "GL_AMD_gpu_shader_int64");
        GL_AMD_interleaved_elements = loader.hasExtension(version, exts, "GL_AMD_interleaved_elements");
        GL_AMD_multi_draw_indirect = loader.hasExtension(version, exts, "GL_AMD_multi_draw_indirect");
        GL_AMD_name_gen_delete = loader.hasExtension(version, exts, "GL_AMD_name_gen_delete");
        GL_AMD_occlusion_query_event = loader.hasExtension(version, exts, "GL_AMD_occlusion_query_event");
        GL_AMD_performance_monitor = loader.hasExtension(version, exts, "GL_AMD_performance_monitor");
        GL_AMD_pinned_memory = loader.hasExtension(version, exts, "GL_AMD_pinned_memory");
        GL_AMD_query_buffer_object = loader.hasExtension(version, exts, "GL_AMD_query_buffer_object");
        GL_AMD_sample_positions = loader.hasExtension(version, exts, "GL_AMD_sample_positions");
        GL_AMD_seamless_cubemap_per_texture = loader.hasExtension(version, exts, "GL_AMD_seamless_cubemap_per_texture");
        GL_AMD_shader_atomic_counter_ops = loader.hasExtension(version, exts, "GL_AMD_shader_atomic_counter_ops");
        GL_AMD_shader_ballot = loader.hasExtension(version, exts, "GL_AMD_shader_ballot");
        GL_AMD_shader_gpu_shader_half_float_fetch = loader.hasExtension(version, exts, "GL_AMD_shader_gpu_shader_half_float_fetch");
        GL_AMD_shader_image_load_store_lod = loader.hasExtension(version, exts, "GL_AMD_shader_image_load_store_lod");
        GL_AMD_shader_stencil_export = loader.hasExtension(version, exts, "GL_AMD_shader_stencil_export");
        GL_AMD_shader_trinary_minmax = loader.hasExtension(version, exts, "GL_AMD_shader_trinary_minmax");
        GL_AMD_shader_explicit_vertex_parameter = loader.hasExtension(version, exts, "GL_AMD_shader_explicit_vertex_parameter");
        GL_AMD_sparse_texture = loader.hasExtension(version, exts, "GL_AMD_sparse_texture");
        GL_AMD_stencil_operation_extended = loader.hasExtension(version, exts, "GL_AMD_stencil_operation_extended");
        GL_AMD_texture_gather_bias_lod = loader.hasExtension(version, exts, "GL_AMD_texture_gather_bias_lod");
        GL_AMD_texture_texture4 = loader.hasExtension(version, exts, "GL_AMD_texture_texture4");
        GL_AMD_transform_feedback3_lines_triangles = loader.hasExtension(version, exts, "GL_AMD_transform_feedback3_lines_triangles");
        GL_AMD_transform_feedback4 = loader.hasExtension(version, exts, "GL_AMD_transform_feedback4");
        GL_AMD_vertex_shader_layer = loader.hasExtension(version, exts, "GL_AMD_vertex_shader_layer");
        GL_AMD_vertex_shader_tessellator = loader.hasExtension(version, exts, "GL_AMD_vertex_shader_tessellator");
        GL_AMD_vertex_shader_viewport_index = loader.hasExtension(version, exts, "GL_AMD_vertex_shader_viewport_index");
        GL_APPLE_aux_depth_stencil = loader.hasExtension(version, exts, "GL_APPLE_aux_depth_stencil");
        GL_APPLE_client_storage = loader.hasExtension(version, exts, "GL_APPLE_client_storage");
        GL_APPLE_element_array = loader.hasExtension(version, exts, "GL_APPLE_element_array");
        GL_APPLE_fence = loader.hasExtension(version, exts, "GL_APPLE_fence");
        GL_APPLE_float_pixels = loader.hasExtension(version, exts, "GL_APPLE_float_pixels");
        GL_APPLE_flush_buffer_range = loader.hasExtension(version, exts, "GL_APPLE_flush_buffer_range");
        GL_APPLE_object_purgeable = loader.hasExtension(version, exts, "GL_APPLE_object_purgeable");
        GL_APPLE_rgb_422 = loader.hasExtension(version, exts, "GL_APPLE_rgb_422");
        GL_APPLE_row_bytes = loader.hasExtension(version, exts, "GL_APPLE_row_bytes");
        GL_APPLE_specular_vector = loader.hasExtension(version, exts, "GL_APPLE_specular_vector");
        GL_APPLE_texture_range = loader.hasExtension(version, exts, "GL_APPLE_texture_range");
        GL_APPLE_transform_hint = loader.hasExtension(version, exts, "GL_APPLE_transform_hint");
        GL_APPLE_vertex_array_object = loader.hasExtension(version, exts, "GL_APPLE_vertex_array_object");
        GL_APPLE_vertex_array_range = loader.hasExtension(version, exts, "GL_APPLE_vertex_array_range");
        GL_APPLE_vertex_program_evaluators = loader.hasExtension(version, exts, "GL_APPLE_vertex_program_evaluators");
        GL_APPLE_ycbcr_422 = loader.hasExtension(version, exts, "GL_APPLE_ycbcr_422");
        GL_ARB_ES2_compatibility = loader.hasExtension(version, exts, "GL_ARB_ES2_compatibility");
        GL_ARB_ES3_1_compatibility = loader.hasExtension(version, exts, "GL_ARB_ES3_1_compatibility");
        GL_ARB_ES3_2_compatibility = loader.hasExtension(version, exts, "GL_ARB_ES3_2_compatibility");
        GL_ARB_ES3_compatibility = loader.hasExtension(version, exts, "GL_ARB_ES3_compatibility");
        GL_ARB_arrays_of_arrays = loader.hasExtension(version, exts, "GL_ARB_arrays_of_arrays");
        GL_ARB_base_instance = loader.hasExtension(version, exts, "GL_ARB_base_instance");
        GL_ARB_bindless_texture = loader.hasExtension(version, exts, "GL_ARB_bindless_texture");
        GL_ARB_blend_func_extended = loader.hasExtension(version, exts, "GL_ARB_blend_func_extended");
        GL_ARB_buffer_storage = loader.hasExtension(version, exts, "GL_ARB_buffer_storage");
        GL_ARB_cl_event = loader.hasExtension(version, exts, "GL_ARB_cl_event");
        GL_ARB_clear_buffer_object = loader.hasExtension(version, exts, "GL_ARB_clear_buffer_object");
        GL_ARB_clear_texture = loader.hasExtension(version, exts, "GL_ARB_clear_texture");
        GL_ARB_clip_control = loader.hasExtension(version, exts, "GL_ARB_clip_control");
        GL_ARB_color_buffer_float = loader.hasExtension(version, exts, "GL_ARB_color_buffer_float");
        GL_ARB_compatibility = loader.hasExtension(version, exts, "GL_ARB_compatibility");
        GL_ARB_compressed_texture_pixel_storage = loader.hasExtension(version, exts, "GL_ARB_compressed_texture_pixel_storage");
        GL_ARB_compute_shader = loader.hasExtension(version, exts, "GL_ARB_compute_shader");
        GL_ARB_compute_variable_group_size = loader.hasExtension(version, exts, "GL_ARB_compute_variable_group_size");
        GL_ARB_conditional_render_inverted = loader.hasExtension(version, exts, "GL_ARB_conditional_render_inverted");
        GL_ARB_conservative_depth = loader.hasExtension(version, exts, "GL_ARB_conservative_depth");
        GL_ARB_copy_buffer = loader.hasExtension(version, exts, "GL_ARB_copy_buffer");
        GL_ARB_copy_image = loader.hasExtension(version, exts, "GL_ARB_copy_image");
        GL_ARB_cull_distance = loader.hasExtension(version, exts, "GL_ARB_cull_distance");
        GL_ARB_debug_output = loader.hasExtension(version, exts, "GL_ARB_debug_output");
        GL_ARB_depth_buffer_float = loader.hasExtension(version, exts, "GL_ARB_depth_buffer_float");
        GL_ARB_depth_clamp = loader.hasExtension(version, exts, "GL_ARB_depth_clamp");
        GL_ARB_depth_texture = loader.hasExtension(version, exts, "GL_ARB_depth_texture");
        GL_ARB_derivative_control = loader.hasExtension(version, exts, "GL_ARB_derivative_control");
        GL_ARB_direct_state_access = loader.hasExtension(version, exts, "GL_ARB_direct_state_access");
        GL_ARB_draw_buffers = loader.hasExtension(version, exts, "GL_ARB_draw_buffers");
        GL_ARB_draw_buffers_blend = loader.hasExtension(version, exts, "GL_ARB_draw_buffers_blend");
        GL_ARB_draw_elements_base_vertex = loader.hasExtension(version, exts, "GL_ARB_draw_elements_base_vertex");
        GL_ARB_draw_indirect = loader.hasExtension(version, exts, "GL_ARB_draw_indirect");
        GL_ARB_draw_instanced = loader.hasExtension(version, exts, "GL_ARB_draw_instanced");
        GL_ARB_enhanced_layouts = loader.hasExtension(version, exts, "GL_ARB_enhanced_layouts");
        GL_ARB_explicit_attrib_location = loader.hasExtension(version, exts, "GL_ARB_explicit_attrib_location");
        GL_ARB_explicit_uniform_location = loader.hasExtension(version, exts, "GL_ARB_explicit_uniform_location");
        GL_ARB_fragment_coord_conventions = loader.hasExtension(version, exts, "GL_ARB_fragment_coord_conventions");
        GL_ARB_fragment_layer_viewport = loader.hasExtension(version, exts, "GL_ARB_fragment_layer_viewport");
        GL_ARB_fragment_program = loader.hasExtension(version, exts, "GL_ARB_fragment_program");
        GL_ARB_fragment_program_shadow = loader.hasExtension(version, exts, "GL_ARB_fragment_program_shadow");
        GL_ARB_fragment_shader = loader.hasExtension(version, exts, "GL_ARB_fragment_shader");
        GL_ARB_fragment_shader_interlock = loader.hasExtension(version, exts, "GL_ARB_fragment_shader_interlock");
        GL_ARB_framebuffer_no_attachments = loader.hasExtension(version, exts, "GL_ARB_framebuffer_no_attachments");
        GL_ARB_framebuffer_object = loader.hasExtension(version, exts, "GL_ARB_framebuffer_object");
        GL_ARB_framebuffer_sRGB = loader.hasExtension(version, exts, "GL_ARB_framebuffer_sRGB");
        GL_ARB_geometry_shader4 = loader.hasExtension(version, exts, "GL_ARB_geometry_shader4");
        GL_ARB_get_program_binary = loader.hasExtension(version, exts, "GL_ARB_get_program_binary");
        GL_ARB_get_texture_sub_image = loader.hasExtension(version, exts, "GL_ARB_get_texture_sub_image");
        GL_ARB_gl_spirv = loader.hasExtension(version, exts, "GL_ARB_gl_spirv");
        GL_ARB_gpu_shader5 = loader.hasExtension(version, exts, "GL_ARB_gpu_shader5");
        GL_ARB_gpu_shader_fp64 = loader.hasExtension(version, exts, "GL_ARB_gpu_shader_fp64");
        GL_ARB_gpu_shader_int64 = loader.hasExtension(version, exts, "GL_ARB_gpu_shader_int64");
        GL_ARB_half_float_pixel = loader.hasExtension(version, exts, "GL_ARB_half_float_pixel");
        GL_ARB_half_float_vertex = loader.hasExtension(version, exts, "GL_ARB_half_float_vertex");
        GL_ARB_imaging = loader.hasExtension(version, exts, "GL_ARB_imaging");
        GL_ARB_indirect_parameters = loader.hasExtension(version, exts, "GL_ARB_indirect_parameters");
        GL_ARB_instanced_arrays = loader.hasExtension(version, exts, "GL_ARB_instanced_arrays");
        GL_ARB_internalformat_query = loader.hasExtension(version, exts, "GL_ARB_internalformat_query");
        GL_ARB_internalformat_query2 = loader.hasExtension(version, exts, "GL_ARB_internalformat_query2");
        GL_ARB_invalidate_subdata = loader.hasExtension(version, exts, "GL_ARB_invalidate_subdata");
        GL_ARB_map_buffer_alignment = loader.hasExtension(version, exts, "GL_ARB_map_buffer_alignment");
        GL_ARB_map_buffer_range = loader.hasExtension(version, exts, "GL_ARB_map_buffer_range");
        GL_ARB_matrix_palette = loader.hasExtension(version, exts, "GL_ARB_matrix_palette");
        GL_ARB_multi_bind = loader.hasExtension(version, exts, "GL_ARB_multi_bind");
        GL_ARB_multi_draw_indirect = loader.hasExtension(version, exts, "GL_ARB_multi_draw_indirect");
        GL_ARB_multisample = loader.hasExtension(version, exts, "GL_ARB_multisample");
        GL_ARB_multitexture = loader.hasExtension(version, exts, "GL_ARB_multitexture");
        GL_ARB_occlusion_query = loader.hasExtension(version, exts, "GL_ARB_occlusion_query");
        GL_ARB_occlusion_query2 = loader.hasExtension(version, exts, "GL_ARB_occlusion_query2");
        GL_ARB_parallel_shader_compile = loader.hasExtension(version, exts, "GL_ARB_parallel_shader_compile");
        GL_ARB_pipeline_statistics_query = loader.hasExtension(version, exts, "GL_ARB_pipeline_statistics_query");
        GL_ARB_pixel_buffer_object = loader.hasExtension(version, exts, "GL_ARB_pixel_buffer_object");
        GL_ARB_point_parameters = loader.hasExtension(version, exts, "GL_ARB_point_parameters");
        GL_ARB_point_sprite = loader.hasExtension(version, exts, "GL_ARB_point_sprite");
        GL_ARB_polygon_offset_clamp = loader.hasExtension(version, exts, "GL_ARB_polygon_offset_clamp");
        GL_ARB_post_depth_coverage = loader.hasExtension(version, exts, "GL_ARB_post_depth_coverage");
        GL_ARB_program_interface_query = loader.hasExtension(version, exts, "GL_ARB_program_interface_query");
        GL_ARB_provoking_vertex = loader.hasExtension(version, exts, "GL_ARB_provoking_vertex");
        GL_ARB_query_buffer_object = loader.hasExtension(version, exts, "GL_ARB_query_buffer_object");
        GL_ARB_robust_buffer_access_behavior = loader.hasExtension(version, exts, "GL_ARB_robust_buffer_access_behavior");
        GL_ARB_robustness = loader.hasExtension(version, exts, "GL_ARB_robustness");
        GL_ARB_robustness_isolation = loader.hasExtension(version, exts, "GL_ARB_robustness_isolation");
        GL_ARB_sample_locations = loader.hasExtension(version, exts, "GL_ARB_sample_locations");
        GL_ARB_sample_shading = loader.hasExtension(version, exts, "GL_ARB_sample_shading");
        GL_ARB_sampler_objects = loader.hasExtension(version, exts, "GL_ARB_sampler_objects");
        GL_ARB_seamless_cube_map = loader.hasExtension(version, exts, "GL_ARB_seamless_cube_map");
        GL_ARB_seamless_cubemap_per_texture = loader.hasExtension(version, exts, "GL_ARB_seamless_cubemap_per_texture");
        GL_ARB_separate_shader_objects = loader.hasExtension(version, exts, "GL_ARB_separate_shader_objects");
        GL_ARB_shader_atomic_counter_ops = loader.hasExtension(version, exts, "GL_ARB_shader_atomic_counter_ops");
        GL_ARB_shader_atomic_counters = loader.hasExtension(version, exts, "GL_ARB_shader_atomic_counters");
        GL_ARB_shader_ballot = loader.hasExtension(version, exts, "GL_ARB_shader_ballot");
        GL_ARB_shader_bit_encoding = loader.hasExtension(version, exts, "GL_ARB_shader_bit_encoding");
        GL_ARB_shader_clock = loader.hasExtension(version, exts, "GL_ARB_shader_clock");
        GL_ARB_shader_draw_parameters = loader.hasExtension(version, exts, "GL_ARB_shader_draw_parameters");
        GL_ARB_shader_group_vote = loader.hasExtension(version, exts, "GL_ARB_shader_group_vote");
        GL_ARB_shader_image_load_store = loader.hasExtension(version, exts, "GL_ARB_shader_image_load_store");
        GL_ARB_shader_image_size = loader.hasExtension(version, exts, "GL_ARB_shader_image_size");
        GL_ARB_shader_objects = loader.hasExtension(version, exts, "GL_ARB_shader_objects");
        GL_ARB_shader_precision = loader.hasExtension(version, exts, "GL_ARB_shader_precision");
        GL_ARB_shader_stencil_export = loader.hasExtension(version, exts, "GL_ARB_shader_stencil_export");
        GL_ARB_shader_storage_buffer_object = loader.hasExtension(version, exts, "GL_ARB_shader_storage_buffer_object");
        GL_ARB_shader_subroutine = loader.hasExtension(version, exts, "GL_ARB_shader_subroutine");
        GL_ARB_shader_texture_image_samples = loader.hasExtension(version, exts, "GL_ARB_shader_texture_image_samples");
        GL_ARB_shader_texture_lod = loader.hasExtension(version, exts, "GL_ARB_shader_texture_lod");
        GL_ARB_shader_viewport_layer_array = loader.hasExtension(version, exts, "GL_ARB_shader_viewport_layer_array");
        GL_ARB_shading_language_100 = loader.hasExtension(version, exts, "GL_ARB_shading_language_100");
        GL_ARB_shading_language_420pack = loader.hasExtension(version, exts, "GL_ARB_shading_language_420pack");
        GL_ARB_shading_language_include = loader.hasExtension(version, exts, "GL_ARB_shading_language_include");
        GL_ARB_shading_language_packing = loader.hasExtension(version, exts, "GL_ARB_shading_language_packing");
        GL_ARB_shadow = loader.hasExtension(version, exts, "GL_ARB_shadow");
        GL_ARB_shadow_ambient = loader.hasExtension(version, exts, "GL_ARB_shadow_ambient");
        GL_ARB_sparse_buffer = loader.hasExtension(version, exts, "GL_ARB_sparse_buffer");
        GL_ARB_sparse_texture = loader.hasExtension(version, exts, "GL_ARB_sparse_texture");
        GL_ARB_sparse_texture2 = loader.hasExtension(version, exts, "GL_ARB_sparse_texture2");
        GL_ARB_sparse_texture_clamp = loader.hasExtension(version, exts, "GL_ARB_sparse_texture_clamp");
        GL_ARB_spirv_extensions = loader.hasExtension(version, exts, "GL_ARB_spirv_extensions");
        GL_ARB_stencil_texturing = loader.hasExtension(version, exts, "GL_ARB_stencil_texturing");
        GL_ARB_sync = loader.hasExtension(version, exts, "GL_ARB_sync");
        GL_ARB_tessellation_shader = loader.hasExtension(version, exts, "GL_ARB_tessellation_shader");
        GL_ARB_texture_barrier = loader.hasExtension(version, exts, "GL_ARB_texture_barrier");
        GL_ARB_texture_border_clamp = loader.hasExtension(version, exts, "GL_ARB_texture_border_clamp");
        GL_ARB_texture_buffer_object = loader.hasExtension(version, exts, "GL_ARB_texture_buffer_object");
        GL_ARB_texture_buffer_object_rgb32 = loader.hasExtension(version, exts, "GL_ARB_texture_buffer_object_rgb32");
        GL_ARB_texture_buffer_range = loader.hasExtension(version, exts, "GL_ARB_texture_buffer_range");
        GL_ARB_texture_compression = loader.hasExtension(version, exts, "GL_ARB_texture_compression");
        GL_ARB_texture_compression_bptc = loader.hasExtension(version, exts, "GL_ARB_texture_compression_bptc");
        GL_ARB_texture_compression_rgtc = loader.hasExtension(version, exts, "GL_ARB_texture_compression_rgtc");
        GL_ARB_texture_cube_map = loader.hasExtension(version, exts, "GL_ARB_texture_cube_map");
        GL_ARB_texture_cube_map_array = loader.hasExtension(version, exts, "GL_ARB_texture_cube_map_array");
        GL_ARB_texture_env_add = loader.hasExtension(version, exts, "GL_ARB_texture_env_add");
        GL_ARB_texture_env_combine = loader.hasExtension(version, exts, "GL_ARB_texture_env_combine");
        GL_ARB_texture_env_crossbar = loader.hasExtension(version, exts, "GL_ARB_texture_env_crossbar");
        GL_ARB_texture_env_dot3 = loader.hasExtension(version, exts, "GL_ARB_texture_env_dot3");
        GL_ARB_texture_filter_anisotropic = loader.hasExtension(version, exts, "GL_ARB_texture_filter_anisotropic");
        GL_ARB_texture_filter_minmax = loader.hasExtension(version, exts, "GL_ARB_texture_filter_minmax");
        GL_ARB_texture_float = loader.hasExtension(version, exts, "GL_ARB_texture_float");
        GL_ARB_texture_gather = loader.hasExtension(version, exts, "GL_ARB_texture_gather");
        GL_ARB_texture_mirror_clamp_to_edge = loader.hasExtension(version, exts, "GL_ARB_texture_mirror_clamp_to_edge");
        GL_ARB_texture_mirrored_repeat = loader.hasExtension(version, exts, "GL_ARB_texture_mirrored_repeat");
        GL_ARB_texture_multisample = loader.hasExtension(version, exts, "GL_ARB_texture_multisample");
        GL_ARB_texture_non_power_of_two = loader.hasExtension(version, exts, "GL_ARB_texture_non_power_of_two");
        GL_ARB_texture_query_levels = loader.hasExtension(version, exts, "GL_ARB_texture_query_levels");
        GL_ARB_texture_query_lod = loader.hasExtension(version, exts, "GL_ARB_texture_query_lod");
        GL_ARB_texture_rectangle = loader.hasExtension(version, exts, "GL_ARB_texture_rectangle");
        GL_ARB_texture_rg = loader.hasExtension(version, exts, "GL_ARB_texture_rg");
        GL_ARB_texture_rgb10_a2ui = loader.hasExtension(version, exts, "GL_ARB_texture_rgb10_a2ui");
        GL_ARB_texture_stencil8 = loader.hasExtension(version, exts, "GL_ARB_texture_stencil8");
        GL_ARB_texture_storage = loader.hasExtension(version, exts, "GL_ARB_texture_storage");
        GL_ARB_texture_storage_multisample = loader.hasExtension(version, exts, "GL_ARB_texture_storage_multisample");
        GL_ARB_texture_swizzle = loader.hasExtension(version, exts, "GL_ARB_texture_swizzle");
        GL_ARB_texture_view = loader.hasExtension(version, exts, "GL_ARB_texture_view");
        GL_ARB_timer_query = loader.hasExtension(version, exts, "GL_ARB_timer_query");
        GL_ARB_transform_feedback2 = loader.hasExtension(version, exts, "GL_ARB_transform_feedback2");
        GL_ARB_transform_feedback3 = loader.hasExtension(version, exts, "GL_ARB_transform_feedback3");
        GL_ARB_transform_feedback_instanced = loader.hasExtension(version, exts, "GL_ARB_transform_feedback_instanced");
        GL_ARB_transform_feedback_overflow_query = loader.hasExtension(version, exts, "GL_ARB_transform_feedback_overflow_query");
        GL_ARB_transpose_matrix = loader.hasExtension(version, exts, "GL_ARB_transpose_matrix");
        GL_ARB_uniform_buffer_object = loader.hasExtension(version, exts, "GL_ARB_uniform_buffer_object");
        GL_ARB_vertex_array_bgra = loader.hasExtension(version, exts, "GL_ARB_vertex_array_bgra");
        GL_ARB_vertex_array_object = loader.hasExtension(version, exts, "GL_ARB_vertex_array_object");
        GL_ARB_vertex_attrib_64bit = loader.hasExtension(version, exts, "GL_ARB_vertex_attrib_64bit");
        GL_ARB_vertex_attrib_binding = loader.hasExtension(version, exts, "GL_ARB_vertex_attrib_binding");
        GL_ARB_vertex_blend = loader.hasExtension(version, exts, "GL_ARB_vertex_blend");
        GL_ARB_vertex_buffer_object = loader.hasExtension(version, exts, "GL_ARB_vertex_buffer_object");
        GL_ARB_vertex_program = loader.hasExtension(version, exts, "GL_ARB_vertex_program");
        GL_ARB_vertex_shader = loader.hasExtension(version, exts, "GL_ARB_vertex_shader");
        GL_ARB_vertex_type_10f_11f_11f_rev = loader.hasExtension(version, exts, "GL_ARB_vertex_type_10f_11f_11f_rev");
        GL_ARB_vertex_type_2_10_10_10_rev = loader.hasExtension(version, exts, "GL_ARB_vertex_type_2_10_10_10_rev");
        GL_ARB_viewport_array = loader.hasExtension(version, exts, "GL_ARB_viewport_array");
        GL_ARB_window_pos = loader.hasExtension(version, exts, "GL_ARB_window_pos");
        GL_ATI_draw_buffers = loader.hasExtension(version, exts, "GL_ATI_draw_buffers");
        GL_ATI_element_array = loader.hasExtension(version, exts, "GL_ATI_element_array");
        GL_ATI_envmap_bumpmap = loader.hasExtension(version, exts, "GL_ATI_envmap_bumpmap");
        GL_ATI_fragment_shader = loader.hasExtension(version, exts, "GL_ATI_fragment_shader");
        GL_ATI_map_object_buffer = loader.hasExtension(version, exts, "GL_ATI_map_object_buffer");
        GL_ATI_meminfo = loader.hasExtension(version, exts, "GL_ATI_meminfo");
        GL_ATI_pixel_format_float = loader.hasExtension(version, exts, "GL_ATI_pixel_format_float");
        GL_ATI_pn_triangles = loader.hasExtension(version, exts, "GL_ATI_pn_triangles");
        GL_ATI_separate_stencil = loader.hasExtension(version, exts, "GL_ATI_separate_stencil");
        GL_ATI_text_fragment_shader = loader.hasExtension(version, exts, "GL_ATI_text_fragment_shader");
        GL_ATI_texture_env_combine3 = loader.hasExtension(version, exts, "GL_ATI_texture_env_combine3");
        GL_ATI_texture_float = loader.hasExtension(version, exts, "GL_ATI_texture_float");
        GL_ATI_texture_mirror_once = loader.hasExtension(version, exts, "GL_ATI_texture_mirror_once");
        GL_ATI_vertex_array_object = loader.hasExtension(version, exts, "GL_ATI_vertex_array_object");
        GL_ATI_vertex_attrib_array_object = loader.hasExtension(version, exts, "GL_ATI_vertex_attrib_array_object");
        GL_ATI_vertex_streams = loader.hasExtension(version, exts, "GL_ATI_vertex_streams");
        GL_EXT_422_pixels = loader.hasExtension(version, exts, "GL_EXT_422_pixels");
        GL_EXT_EGL_image_storage = loader.hasExtension(version, exts, "GL_EXT_EGL_image_storage");
        GL_EXT_EGL_sync = loader.hasExtension(version, exts, "GL_EXT_EGL_sync");
        GL_EXT_abgr = loader.hasExtension(version, exts, "GL_EXT_abgr");
        GL_EXT_bgra = loader.hasExtension(version, exts, "GL_EXT_bgra");
        GL_EXT_bindable_uniform = loader.hasExtension(version, exts, "GL_EXT_bindable_uniform");
        GL_EXT_blend_color = loader.hasExtension(version, exts, "GL_EXT_blend_color");
        GL_EXT_blend_equation_separate = loader.hasExtension(version, exts, "GL_EXT_blend_equation_separate");
        GL_EXT_blend_func_separate = loader.hasExtension(version, exts, "GL_EXT_blend_func_separate");
        GL_EXT_blend_logic_op = loader.hasExtension(version, exts, "GL_EXT_blend_logic_op");
        GL_EXT_blend_minmax = loader.hasExtension(version, exts, "GL_EXT_blend_minmax");
        GL_EXT_blend_subtract = loader.hasExtension(version, exts, "GL_EXT_blend_subtract");
        GL_EXT_clip_volume_hint = loader.hasExtension(version, exts, "GL_EXT_clip_volume_hint");
        GL_EXT_cmyka = loader.hasExtension(version, exts, "GL_EXT_cmyka");
        GL_EXT_color_subtable = loader.hasExtension(version, exts, "GL_EXT_color_subtable");
        GL_EXT_compiled_vertex_array = loader.hasExtension(version, exts, "GL_EXT_compiled_vertex_array");
        GL_EXT_convolution = loader.hasExtension(version, exts, "GL_EXT_convolution");
        GL_EXT_coordinate_frame = loader.hasExtension(version, exts, "GL_EXT_coordinate_frame");
        GL_EXT_copy_texture = loader.hasExtension(version, exts, "GL_EXT_copy_texture");
        GL_EXT_cull_vertex = loader.hasExtension(version, exts, "GL_EXT_cull_vertex");
        GL_EXT_debug_label = loader.hasExtension(version, exts, "GL_EXT_debug_label");
        GL_EXT_debug_marker = loader.hasExtension(version, exts, "GL_EXT_debug_marker");
        GL_EXT_depth_bounds_test = loader.hasExtension(version, exts, "GL_EXT_depth_bounds_test");
        GL_EXT_direct_state_access = loader.hasExtension(version, exts, "GL_EXT_direct_state_access");
        GL_EXT_draw_buffers2 = loader.hasExtension(version, exts, "GL_EXT_draw_buffers2");
        GL_EXT_draw_instanced = loader.hasExtension(version, exts, "GL_EXT_draw_instanced");
        GL_EXT_draw_range_elements = loader.hasExtension(version, exts, "GL_EXT_draw_range_elements");
        GL_EXT_external_buffer = loader.hasExtension(version, exts, "GL_EXT_external_buffer");
        GL_EXT_fog_coord = loader.hasExtension(version, exts, "GL_EXT_fog_coord");
        GL_EXT_framebuffer_blit = loader.hasExtension(version, exts, "GL_EXT_framebuffer_blit");
        GL_EXT_framebuffer_blit_layers = loader.hasExtension(version, exts, "GL_EXT_framebuffer_blit_layers");
        GL_EXT_framebuffer_multisample = loader.hasExtension(version, exts, "GL_EXT_framebuffer_multisample");
        GL_EXT_framebuffer_multisample_blit_scaled = loader.hasExtension(version, exts, "GL_EXT_framebuffer_multisample_blit_scaled");
        GL_EXT_framebuffer_object = loader.hasExtension(version, exts, "GL_EXT_framebuffer_object");
        GL_EXT_framebuffer_sRGB = loader.hasExtension(version, exts, "GL_EXT_framebuffer_sRGB");
        GL_EXT_geometry_shader4 = loader.hasExtension(version, exts, "GL_EXT_geometry_shader4");
        GL_EXT_gpu_program_parameters = loader.hasExtension(version, exts, "GL_EXT_gpu_program_parameters");
        GL_EXT_gpu_shader4 = loader.hasExtension(version, exts, "GL_EXT_gpu_shader4");
        GL_EXT_histogram = loader.hasExtension(version, exts, "GL_EXT_histogram");
        GL_EXT_index_array_formats = loader.hasExtension(version, exts, "GL_EXT_index_array_formats");
        GL_EXT_index_func = loader.hasExtension(version, exts, "GL_EXT_index_func");
        GL_EXT_index_material = loader.hasExtension(version, exts, "GL_EXT_index_material");
        GL_EXT_index_texture = loader.hasExtension(version, exts, "GL_EXT_index_texture");
        GL_EXT_light_texture = loader.hasExtension(version, exts, "GL_EXT_light_texture");
        GL_EXT_memory_object = loader.hasExtension(version, exts, "GL_EXT_memory_object");
        GL_EXT_memory_object_fd = loader.hasExtension(version, exts, "GL_EXT_memory_object_fd");
        GL_EXT_memory_object_win32 = loader.hasExtension(version, exts, "GL_EXT_memory_object_win32");
        GL_EXT_misc_attribute = loader.hasExtension(version, exts, "GL_EXT_misc_attribute");
        GL_EXT_multi_draw_arrays = loader.hasExtension(version, exts, "GL_EXT_multi_draw_arrays");
        GL_EXT_multisample = loader.hasExtension(version, exts, "GL_EXT_multisample");
        GL_EXT_multiview_tessellation_geometry_shader = loader.hasExtension(version, exts, "GL_EXT_multiview_tessellation_geometry_shader");
        GL_EXT_multiview_texture_multisample = loader.hasExtension(version, exts, "GL_EXT_multiview_texture_multisample");
        GL_EXT_multiview_timer_query = loader.hasExtension(version, exts, "GL_EXT_multiview_timer_query");
        GL_EXT_packed_depth_stencil = loader.hasExtension(version, exts, "GL_EXT_packed_depth_stencil");
        GL_EXT_packed_float = loader.hasExtension(version, exts, "GL_EXT_packed_float");
        GL_EXT_packed_pixels = loader.hasExtension(version, exts, "GL_EXT_packed_pixels");
        GL_EXT_paletted_texture = loader.hasExtension(version, exts, "GL_EXT_paletted_texture");
        GL_EXT_pixel_buffer_object = loader.hasExtension(version, exts, "GL_EXT_pixel_buffer_object");
        GL_EXT_pixel_transform = loader.hasExtension(version, exts, "GL_EXT_pixel_transform");
        GL_EXT_pixel_transform_color_table = loader.hasExtension(version, exts, "GL_EXT_pixel_transform_color_table");
        GL_EXT_point_parameters = loader.hasExtension(version, exts, "GL_EXT_point_parameters");
        GL_EXT_polygon_offset = loader.hasExtension(version, exts, "GL_EXT_polygon_offset");
        GL_EXT_polygon_offset_clamp = loader.hasExtension(version, exts, "GL_EXT_polygon_offset_clamp");
        GL_EXT_post_depth_coverage = loader.hasExtension(version, exts, "GL_EXT_post_depth_coverage");
        GL_EXT_provoking_vertex = loader.hasExtension(version, exts, "GL_EXT_provoking_vertex");
        GL_EXT_raster_multisample = loader.hasExtension(version, exts, "GL_EXT_raster_multisample");
        GL_EXT_rescale_normal = loader.hasExtension(version, exts, "GL_EXT_rescale_normal");
        GL_EXT_semaphore = loader.hasExtension(version, exts, "GL_EXT_semaphore");
        GL_EXT_semaphore_fd = loader.hasExtension(version, exts, "GL_EXT_semaphore_fd");
        GL_EXT_semaphore_win32 = loader.hasExtension(version, exts, "GL_EXT_semaphore_win32");
        GL_EXT_secondary_color = loader.hasExtension(version, exts, "GL_EXT_secondary_color");
        GL_EXT_separate_shader_objects = loader.hasExtension(version, exts, "GL_EXT_separate_shader_objects");
        GL_EXT_separate_specular_color = loader.hasExtension(version, exts, "GL_EXT_separate_specular_color");
        GL_EXT_shader_framebuffer_fetch = loader.hasExtension(version, exts, "GL_EXT_shader_framebuffer_fetch");
        GL_EXT_shader_framebuffer_fetch_non_coherent = loader.hasExtension(version, exts, "GL_EXT_shader_framebuffer_fetch_non_coherent");
        GL_EXT_shader_image_load_formatted = loader.hasExtension(version, exts, "GL_EXT_shader_image_load_formatted");
        GL_EXT_shader_image_load_store = loader.hasExtension(version, exts, "GL_EXT_shader_image_load_store");
        GL_EXT_shader_integer_mix = loader.hasExtension(version, exts, "GL_EXT_shader_integer_mix");
        GL_EXT_shader_samples_identical = loader.hasExtension(version, exts, "GL_EXT_shader_samples_identical");
        GL_EXT_shadow_funcs = loader.hasExtension(version, exts, "GL_EXT_shadow_funcs");
        GL_EXT_shared_texture_palette = loader.hasExtension(version, exts, "GL_EXT_shared_texture_palette");
        GL_EXT_sparse_texture2 = loader.hasExtension(version, exts, "GL_EXT_sparse_texture2");
        GL_EXT_stencil_clear_tag = loader.hasExtension(version, exts, "GL_EXT_stencil_clear_tag");
        GL_EXT_stencil_two_side = loader.hasExtension(version, exts, "GL_EXT_stencil_two_side");
        GL_EXT_stencil_wrap = loader.hasExtension(version, exts, "GL_EXT_stencil_wrap");
        GL_EXT_subtexture = loader.hasExtension(version, exts, "GL_EXT_subtexture");
        GL_EXT_texture = loader.hasExtension(version, exts, "GL_EXT_texture");
        GL_EXT_texture3D = loader.hasExtension(version, exts, "GL_EXT_texture3D");
        GL_EXT_texture_array = loader.hasExtension(version, exts, "GL_EXT_texture_array");
        GL_EXT_texture_buffer_object = loader.hasExtension(version, exts, "GL_EXT_texture_buffer_object");
        GL_EXT_texture_compression_latc = loader.hasExtension(version, exts, "GL_EXT_texture_compression_latc");
        GL_EXT_texture_compression_rgtc = loader.hasExtension(version, exts, "GL_EXT_texture_compression_rgtc");
        GL_EXT_texture_compression_s3tc = loader.hasExtension(version, exts, "GL_EXT_texture_compression_s3tc");
        GL_EXT_texture_cube_map = loader.hasExtension(version, exts, "GL_EXT_texture_cube_map");
        GL_EXT_texture_env_add = loader.hasExtension(version, exts, "GL_EXT_texture_env_add");
        GL_EXT_texture_env_combine = loader.hasExtension(version, exts, "GL_EXT_texture_env_combine");
        GL_EXT_texture_env_dot3 = loader.hasExtension(version, exts, "GL_EXT_texture_env_dot3");
        GL_EXT_texture_filter_anisotropic = loader.hasExtension(version, exts, "GL_EXT_texture_filter_anisotropic");
        GL_EXT_texture_filter_minmax = loader.hasExtension(version, exts, "GL_EXT_texture_filter_minmax");
        GL_EXT_texture_integer = loader.hasExtension(version, exts, "GL_EXT_texture_integer");
        GL_EXT_texture_lod_bias = loader.hasExtension(version, exts, "GL_EXT_texture_lod_bias");
        GL_EXT_texture_mirror_clamp = loader.hasExtension(version, exts, "GL_EXT_texture_mirror_clamp");
        GL_EXT_texture_object = loader.hasExtension(version, exts, "GL_EXT_texture_object");
        GL_EXT_texture_perturb_normal = loader.hasExtension(version, exts, "GL_EXT_texture_perturb_normal");
        GL_EXT_texture_sRGB = loader.hasExtension(version, exts, "GL_EXT_texture_sRGB");
        GL_EXT_texture_sRGB_R8 = loader.hasExtension(version, exts, "GL_EXT_texture_sRGB_R8");
        GL_EXT_texture_sRGB_RG8 = loader.hasExtension(version, exts, "GL_EXT_texture_sRGB_RG8");
        GL_EXT_texture_sRGB_decode = loader.hasExtension(version, exts, "GL_EXT_texture_sRGB_decode");
        GL_EXT_texture_shadow_lod = loader.hasExtension(version, exts, "GL_EXT_texture_shadow_lod");
        GL_EXT_texture_shared_exponent = loader.hasExtension(version, exts, "GL_EXT_texture_shared_exponent");
        GL_EXT_texture_snorm = loader.hasExtension(version, exts, "GL_EXT_texture_snorm");
        GL_EXT_texture_storage = loader.hasExtension(version, exts, "GL_EXT_texture_storage");
        GL_EXT_texture_swizzle = loader.hasExtension(version, exts, "GL_EXT_texture_swizzle");
        GL_NV_timeline_semaphore = loader.hasExtension(version, exts, "GL_NV_timeline_semaphore");
        GL_EXT_timer_query = loader.hasExtension(version, exts, "GL_EXT_timer_query");
        GL_EXT_transform_feedback = loader.hasExtension(version, exts, "GL_EXT_transform_feedback");
        GL_EXT_vertex_array = loader.hasExtension(version, exts, "GL_EXT_vertex_array");
        GL_EXT_vertex_array_bgra = loader.hasExtension(version, exts, "GL_EXT_vertex_array_bgra");
        GL_EXT_vertex_attrib_64bit = loader.hasExtension(version, exts, "GL_EXT_vertex_attrib_64bit");
        GL_EXT_vertex_shader = loader.hasExtension(version, exts, "GL_EXT_vertex_shader");
        GL_EXT_vertex_weighting = loader.hasExtension(version, exts, "GL_EXT_vertex_weighting");
        GL_EXT_win32_keyed_mutex = loader.hasExtension(version, exts, "GL_EXT_win32_keyed_mutex");
        GL_EXT_window_rectangles = loader.hasExtension(version, exts, "GL_EXT_window_rectangles");
        GL_EXT_x11_sync_object = loader.hasExtension(version, exts, "GL_EXT_x11_sync_object");
        GL_GREMEDY_frame_terminator = loader.hasExtension(version, exts, "GL_GREMEDY_frame_terminator");
        GL_GREMEDY_string_marker = loader.hasExtension(version, exts, "GL_GREMEDY_string_marker");
        GL_HP_convolution_border_modes = loader.hasExtension(version, exts, "GL_HP_convolution_border_modes");
        GL_HP_image_transform = loader.hasExtension(version, exts, "GL_HP_image_transform");
        GL_HP_occlusion_test = loader.hasExtension(version, exts, "GL_HP_occlusion_test");
        GL_HP_texture_lighting = loader.hasExtension(version, exts, "GL_HP_texture_lighting");
        GL_IBM_cull_vertex = loader.hasExtension(version, exts, "GL_IBM_cull_vertex");
        GL_IBM_multimode_draw_arrays = loader.hasExtension(version, exts, "GL_IBM_multimode_draw_arrays");
        GL_IBM_rasterpos_clip = loader.hasExtension(version, exts, "GL_IBM_rasterpos_clip");
        GL_IBM_static_data = loader.hasExtension(version, exts, "GL_IBM_static_data");
        GL_IBM_texture_mirrored_repeat = loader.hasExtension(version, exts, "GL_IBM_texture_mirrored_repeat");
        GL_IBM_vertex_array_lists = loader.hasExtension(version, exts, "GL_IBM_vertex_array_lists");
        GL_INGR_blend_func_separate = loader.hasExtension(version, exts, "GL_INGR_blend_func_separate");
        GL_INGR_color_clamp = loader.hasExtension(version, exts, "GL_INGR_color_clamp");
        GL_INGR_interlace_read = loader.hasExtension(version, exts, "GL_INGR_interlace_read");
        GL_INTEL_conservative_rasterization = loader.hasExtension(version, exts, "GL_INTEL_conservative_rasterization");
        GL_INTEL_fragment_shader_ordering = loader.hasExtension(version, exts, "GL_INTEL_fragment_shader_ordering");
        GL_INTEL_framebuffer_CMAA = loader.hasExtension(version, exts, "GL_INTEL_framebuffer_CMAA");
        GL_INTEL_map_texture = loader.hasExtension(version, exts, "GL_INTEL_map_texture");
        GL_INTEL_blackhole_render = loader.hasExtension(version, exts, "GL_INTEL_blackhole_render");
        GL_INTEL_parallel_arrays = loader.hasExtension(version, exts, "GL_INTEL_parallel_arrays");
        GL_INTEL_performance_query = loader.hasExtension(version, exts, "GL_INTEL_performance_query");
        GL_KHR_blend_equation_advanced = loader.hasExtension(version, exts, "GL_KHR_blend_equation_advanced");
        GL_KHR_blend_equation_advanced_coherent = loader.hasExtension(version, exts, "GL_KHR_blend_equation_advanced_coherent");
        GL_KHR_context_flush_control = loader.hasExtension(version, exts, "GL_KHR_context_flush_control");
        GL_KHR_debug = loader.hasExtension(version, exts, "GL_KHR_debug");
        GL_KHR_no_error = loader.hasExtension(version, exts, "GL_KHR_no_error");
        GL_KHR_robust_buffer_access_behavior = loader.hasExtension(version, exts, "GL_KHR_robust_buffer_access_behavior");
        GL_KHR_robustness = loader.hasExtension(version, exts, "GL_KHR_robustness");
        GL_KHR_shader_subgroup = loader.hasExtension(version, exts, "GL_KHR_shader_subgroup");
        GL_KHR_texture_compression_astc_hdr = loader.hasExtension(version, exts, "GL_KHR_texture_compression_astc_hdr");
        GL_KHR_texture_compression_astc_ldr = loader.hasExtension(version, exts, "GL_KHR_texture_compression_astc_ldr");
        GL_KHR_texture_compression_astc_sliced_3d = loader.hasExtension(version, exts, "GL_KHR_texture_compression_astc_sliced_3d");
        GL_KHR_parallel_shader_compile = loader.hasExtension(version, exts, "GL_KHR_parallel_shader_compile");
        GL_MESAX_texture_stack = loader.hasExtension(version, exts, "GL_MESAX_texture_stack");
        GL_MESA_framebuffer_flip_x = loader.hasExtension(version, exts, "GL_MESA_framebuffer_flip_x");
        GL_MESA_framebuffer_flip_y = loader.hasExtension(version, exts, "GL_MESA_framebuffer_flip_y");
        GL_MESA_framebuffer_swap_xy = loader.hasExtension(version, exts, "GL_MESA_framebuffer_swap_xy");
        GL_MESA_pack_invert = loader.hasExtension(version, exts, "GL_MESA_pack_invert");
        GL_MESA_program_binary_formats = loader.hasExtension(version, exts, "GL_MESA_program_binary_formats");
        GL_MESA_resize_buffers = loader.hasExtension(version, exts, "GL_MESA_resize_buffers");
        GL_MESA_shader_integer_functions = loader.hasExtension(version, exts, "GL_MESA_shader_integer_functions");
        GL_MESA_texture_const_bandwidth = loader.hasExtension(version, exts, "GL_MESA_texture_const_bandwidth");
        GL_MESA_tile_raster_order = loader.hasExtension(version, exts, "GL_MESA_tile_raster_order");
        GL_MESA_window_pos = loader.hasExtension(version, exts, "GL_MESA_window_pos");
        GL_MESA_ycbcr_texture = loader.hasExtension(version, exts, "GL_MESA_ycbcr_texture");
        GL_NVX_blend_equation_advanced_multi_draw_buffers = loader.hasExtension(version, exts, "GL_NVX_blend_equation_advanced_multi_draw_buffers");
        GL_NVX_conditional_render = loader.hasExtension(version, exts, "GL_NVX_conditional_render");
        GL_NVX_gpu_memory_info = loader.hasExtension(version, exts, "GL_NVX_gpu_memory_info");
        GL_NVX_linked_gpu_multicast = loader.hasExtension(version, exts, "GL_NVX_linked_gpu_multicast");
        GL_NV_alpha_to_coverage_dither_control = loader.hasExtension(version, exts, "GL_NV_alpha_to_coverage_dither_control");
        GL_NV_bindless_multi_draw_indirect = loader.hasExtension(version, exts, "GL_NV_bindless_multi_draw_indirect");
        GL_NV_bindless_multi_draw_indirect_count = loader.hasExtension(version, exts, "GL_NV_bindless_multi_draw_indirect_count");
        GL_NV_bindless_texture = loader.hasExtension(version, exts, "GL_NV_bindless_texture");
        GL_NV_blend_equation_advanced = loader.hasExtension(version, exts, "GL_NV_blend_equation_advanced");
        GL_NV_blend_equation_advanced_coherent = loader.hasExtension(version, exts, "GL_NV_blend_equation_advanced_coherent");
        GL_NV_blend_minmax_factor = loader.hasExtension(version, exts, "GL_NV_blend_minmax_factor");
        GL_NV_blend_square = loader.hasExtension(version, exts, "GL_NV_blend_square");
        GL_NV_clip_space_w_scaling = loader.hasExtension(version, exts, "GL_NV_clip_space_w_scaling");
        GL_NV_command_list = loader.hasExtension(version, exts, "GL_NV_command_list");
        GL_NV_compute_program5 = loader.hasExtension(version, exts, "GL_NV_compute_program5");
        GL_NV_compute_shader_derivatives = loader.hasExtension(version, exts, "GL_NV_compute_shader_derivatives");
        GL_NV_conditional_render = loader.hasExtension(version, exts, "GL_NV_conditional_render");
        GL_NV_conservative_raster = loader.hasExtension(version, exts, "GL_NV_conservative_raster");
        GL_NV_conservative_raster_dilate = loader.hasExtension(version, exts, "GL_NV_conservative_raster_dilate");
        GL_NV_conservative_raster_pre_snap = loader.hasExtension(version, exts, "GL_NV_conservative_raster_pre_snap");
        GL_NV_conservative_raster_pre_snap_triangles = loader.hasExtension(version, exts, "GL_NV_conservative_raster_pre_snap_triangles");
        GL_NV_conservative_raster_underestimation = loader.hasExtension(version, exts, "GL_NV_conservative_raster_underestimation");
        GL_NV_copy_depth_to_color = loader.hasExtension(version, exts, "GL_NV_copy_depth_to_color");
        GL_NV_copy_image = loader.hasExtension(version, exts, "GL_NV_copy_image");
        GL_NV_deep_texture3D = loader.hasExtension(version, exts, "GL_NV_deep_texture3D");
        GL_NV_depth_buffer_float = loader.hasExtension(version, exts, "GL_NV_depth_buffer_float");
        GL_NV_depth_clamp = loader.hasExtension(version, exts, "GL_NV_depth_clamp");
        GL_NV_draw_texture = loader.hasExtension(version, exts, "GL_NV_draw_texture");
        GL_NV_draw_vulkan_image = loader.hasExtension(version, exts, "GL_NV_draw_vulkan_image");
        GL_NV_evaluators = loader.hasExtension(version, exts, "GL_NV_evaluators");
        GL_NV_explicit_multisample = loader.hasExtension(version, exts, "GL_NV_explicit_multisample");
        GL_NV_fence = loader.hasExtension(version, exts, "GL_NV_fence");
        GL_NV_fill_rectangle = loader.hasExtension(version, exts, "GL_NV_fill_rectangle");
        GL_NV_float_buffer = loader.hasExtension(version, exts, "GL_NV_float_buffer");
        GL_NV_fog_distance = loader.hasExtension(version, exts, "GL_NV_fog_distance");
        GL_NV_fragment_coverage_to_color = loader.hasExtension(version, exts, "GL_NV_fragment_coverage_to_color");
        GL_NV_fragment_program = loader.hasExtension(version, exts, "GL_NV_fragment_program");
        GL_NV_fragment_program2 = loader.hasExtension(version, exts, "GL_NV_fragment_program2");
        GL_NV_fragment_program4 = loader.hasExtension(version, exts, "GL_NV_fragment_program4");
        GL_NV_fragment_program_option = loader.hasExtension(version, exts, "GL_NV_fragment_program_option");
        GL_NV_fragment_shader_barycentric = loader.hasExtension(version, exts, "GL_NV_fragment_shader_barycentric");
        GL_NV_fragment_shader_interlock = loader.hasExtension(version, exts, "GL_NV_fragment_shader_interlock");
        GL_NV_framebuffer_mixed_samples = loader.hasExtension(version, exts, "GL_NV_framebuffer_mixed_samples");
        GL_NV_framebuffer_multisample_coverage = loader.hasExtension(version, exts, "GL_NV_framebuffer_multisample_coverage");
        GL_NV_geometry_program4 = loader.hasExtension(version, exts, "GL_NV_geometry_program4");
        GL_NV_geometry_shader4 = loader.hasExtension(version, exts, "GL_NV_geometry_shader4");
        GL_NV_geometry_shader_passthrough = loader.hasExtension(version, exts, "GL_NV_geometry_shader_passthrough");
        GL_NV_gpu_program4 = loader.hasExtension(version, exts, "GL_NV_gpu_program4");
        GL_NV_gpu_program5 = loader.hasExtension(version, exts, "GL_NV_gpu_program5");
        GL_NV_gpu_program5_mem_extended = loader.hasExtension(version, exts, "GL_NV_gpu_program5_mem_extended");
        GL_NV_gpu_shader5 = loader.hasExtension(version, exts, "GL_NV_gpu_shader5");
        GL_NV_half_float = loader.hasExtension(version, exts, "GL_NV_half_float");
        GL_NV_internalformat_sample_query = loader.hasExtension(version, exts, "GL_NV_internalformat_sample_query");
        GL_NV_light_max_exponent = loader.hasExtension(version, exts, "GL_NV_light_max_exponent");
        GL_NV_gpu_multicast = loader.hasExtension(version, exts, "GL_NV_gpu_multicast");
        GL_NVX_gpu_multicast2 = loader.hasExtension(version, exts, "GL_NVX_gpu_multicast2");
        GL_NVX_progress_fence = loader.hasExtension(version, exts, "GL_NVX_progress_fence");
        GL_NV_memory_attachment = loader.hasExtension(version, exts, "GL_NV_memory_attachment");
        GL_NV_memory_object_sparse = loader.hasExtension(version, exts, "GL_NV_memory_object_sparse");
        GL_NV_mesh_shader = loader.hasExtension(version, exts, "GL_NV_mesh_shader");
        GL_NV_multisample_coverage = loader.hasExtension(version, exts, "GL_NV_multisample_coverage");
        GL_NV_multisample_filter_hint = loader.hasExtension(version, exts, "GL_NV_multisample_filter_hint");
        GL_NV_occlusion_query = loader.hasExtension(version, exts, "GL_NV_occlusion_query");
        GL_NV_packed_depth_stencil = loader.hasExtension(version, exts, "GL_NV_packed_depth_stencil");
        GL_NV_parameter_buffer_object = loader.hasExtension(version, exts, "GL_NV_parameter_buffer_object");
        GL_NV_parameter_buffer_object2 = loader.hasExtension(version, exts, "GL_NV_parameter_buffer_object2");
        GL_NV_path_rendering = loader.hasExtension(version, exts, "GL_NV_path_rendering");
        GL_NV_path_rendering_shared_edge = loader.hasExtension(version, exts, "GL_NV_path_rendering_shared_edge");
        GL_NV_pixel_data_range = loader.hasExtension(version, exts, "GL_NV_pixel_data_range");
        GL_NV_point_sprite = loader.hasExtension(version, exts, "GL_NV_point_sprite");
        GL_NV_present_video = loader.hasExtension(version, exts, "GL_NV_present_video");
        GL_NV_primitive_restart = loader.hasExtension(version, exts, "GL_NV_primitive_restart");
        GL_NV_primitive_shading_rate = loader.hasExtension(version, exts, "GL_NV_primitive_shading_rate");
        GL_NV_query_resource = loader.hasExtension(version, exts, "GL_NV_query_resource");
        GL_NV_query_resource_tag = loader.hasExtension(version, exts, "GL_NV_query_resource_tag");
        GL_NV_register_combiners = loader.hasExtension(version, exts, "GL_NV_register_combiners");
        GL_NV_register_combiners2 = loader.hasExtension(version, exts, "GL_NV_register_combiners2");
        GL_NV_representative_fragment_test = loader.hasExtension(version, exts, "GL_NV_representative_fragment_test");
        GL_NV_robustness_video_memory_purge = loader.hasExtension(version, exts, "GL_NV_robustness_video_memory_purge");
        GL_NV_sample_locations = loader.hasExtension(version, exts, "GL_NV_sample_locations");
        GL_NV_sample_mask_override_coverage = loader.hasExtension(version, exts, "GL_NV_sample_mask_override_coverage");
        GL_NV_scissor_exclusive = loader.hasExtension(version, exts, "GL_NV_scissor_exclusive");
        GL_NV_shader_atomic_counters = loader.hasExtension(version, exts, "GL_NV_shader_atomic_counters");
        GL_NV_shader_atomic_float = loader.hasExtension(version, exts, "GL_NV_shader_atomic_float");
        GL_NV_shader_atomic_float64 = loader.hasExtension(version, exts, "GL_NV_shader_atomic_float64");
        GL_NV_shader_atomic_fp16_vector = loader.hasExtension(version, exts, "GL_NV_shader_atomic_fp16_vector");
        GL_NV_shader_atomic_int64 = loader.hasExtension(version, exts, "GL_NV_shader_atomic_int64");
        GL_NV_shader_buffer_load = loader.hasExtension(version, exts, "GL_NV_shader_buffer_load");
        GL_NV_shader_buffer_store = loader.hasExtension(version, exts, "GL_NV_shader_buffer_store");
        GL_NV_shader_storage_buffer_object = loader.hasExtension(version, exts, "GL_NV_shader_storage_buffer_object");
        GL_NV_shader_subgroup_partitioned = loader.hasExtension(version, exts, "GL_NV_shader_subgroup_partitioned");
        GL_NV_shader_texture_footprint = loader.hasExtension(version, exts, "GL_NV_shader_texture_footprint");
        GL_NV_shader_thread_group = loader.hasExtension(version, exts, "GL_NV_shader_thread_group");
        GL_NV_shader_thread_shuffle = loader.hasExtension(version, exts, "GL_NV_shader_thread_shuffle");
        GL_NV_shading_rate_image = loader.hasExtension(version, exts, "GL_NV_shading_rate_image");
        GL_NV_stereo_view_rendering = loader.hasExtension(version, exts, "GL_NV_stereo_view_rendering");
        GL_NV_tessellation_program5 = loader.hasExtension(version, exts, "GL_NV_tessellation_program5");
        GL_NV_texgen_emboss = loader.hasExtension(version, exts, "GL_NV_texgen_emboss");
        GL_NV_texgen_reflection = loader.hasExtension(version, exts, "GL_NV_texgen_reflection");
        GL_NV_texture_barrier = loader.hasExtension(version, exts, "GL_NV_texture_barrier");
        GL_NV_texture_compression_vtc = loader.hasExtension(version, exts, "GL_NV_texture_compression_vtc");
        GL_NV_texture_env_combine4 = loader.hasExtension(version, exts, "GL_NV_texture_env_combine4");
        GL_NV_texture_expand_normal = loader.hasExtension(version, exts, "GL_NV_texture_expand_normal");
        GL_NV_texture_multisample = loader.hasExtension(version, exts, "GL_NV_texture_multisample");
        GL_NV_texture_rectangle = loader.hasExtension(version, exts, "GL_NV_texture_rectangle");
        GL_NV_texture_rectangle_compressed = loader.hasExtension(version, exts, "GL_NV_texture_rectangle_compressed");
        GL_NV_texture_shader = loader.hasExtension(version, exts, "GL_NV_texture_shader");
        GL_NV_texture_shader2 = loader.hasExtension(version, exts, "GL_NV_texture_shader2");
        GL_NV_texture_shader3 = loader.hasExtension(version, exts, "GL_NV_texture_shader3");
        GL_NV_transform_feedback = loader.hasExtension(version, exts, "GL_NV_transform_feedback");
        GL_NV_transform_feedback2 = loader.hasExtension(version, exts, "GL_NV_transform_feedback2");
        GL_NV_uniform_buffer_std430_layout = loader.hasExtension(version, exts, "GL_NV_uniform_buffer_std430_layout");
        GL_NV_uniform_buffer_unified_memory = loader.hasExtension(version, exts, "GL_NV_uniform_buffer_unified_memory");
        GL_NV_vdpau_interop = loader.hasExtension(version, exts, "GL_NV_vdpau_interop");
        GL_NV_vdpau_interop2 = loader.hasExtension(version, exts, "GL_NV_vdpau_interop2");
        GL_NV_vertex_array_range = loader.hasExtension(version, exts, "GL_NV_vertex_array_range");
        GL_NV_vertex_array_range2 = loader.hasExtension(version, exts, "GL_NV_vertex_array_range2");
        GL_NV_vertex_attrib_integer_64bit = loader.hasExtension(version, exts, "GL_NV_vertex_attrib_integer_64bit");
        GL_NV_vertex_buffer_unified_memory = loader.hasExtension(version, exts, "GL_NV_vertex_buffer_unified_memory");
        GL_NV_vertex_program = loader.hasExtension(version, exts, "GL_NV_vertex_program");
        GL_NV_vertex_program1_1 = loader.hasExtension(version, exts, "GL_NV_vertex_program1_1");
        GL_NV_vertex_program2 = loader.hasExtension(version, exts, "GL_NV_vertex_program2");
        GL_NV_vertex_program2_option = loader.hasExtension(version, exts, "GL_NV_vertex_program2_option");
        GL_NV_vertex_program3 = loader.hasExtension(version, exts, "GL_NV_vertex_program3");
        GL_NV_vertex_program4 = loader.hasExtension(version, exts, "GL_NV_vertex_program4");
        GL_NV_video_capture = loader.hasExtension(version, exts, "GL_NV_video_capture");
        GL_NV_viewport_array2 = loader.hasExtension(version, exts, "GL_NV_viewport_array2");
        GL_NV_viewport_swizzle = loader.hasExtension(version, exts, "GL_NV_viewport_swizzle");
        GL_OES_byte_coordinates = loader.hasExtension(version, exts, "GL_OES_byte_coordinates");
        GL_OES_compressed_paletted_texture = loader.hasExtension(version, exts, "GL_OES_compressed_paletted_texture");
        GL_OES_fixed_point = loader.hasExtension(version, exts, "GL_OES_fixed_point");
        GL_OES_query_matrix = loader.hasExtension(version, exts, "GL_OES_query_matrix");
        GL_OES_read_format = loader.hasExtension(version, exts, "GL_OES_read_format");
        GL_OES_single_precision = loader.hasExtension(version, exts, "GL_OES_single_precision");
        GL_OML_interlace = loader.hasExtension(version, exts, "GL_OML_interlace");
        GL_OML_resample = loader.hasExtension(version, exts, "GL_OML_resample");
        GL_OML_subsample = loader.hasExtension(version, exts, "GL_OML_subsample");
        GL_OVR_multiview = loader.hasExtension(version, exts, "GL_OVR_multiview");
        GL_OVR_multiview2 = loader.hasExtension(version, exts, "GL_OVR_multiview2");
        GL_PGI_misc_hints = loader.hasExtension(version, exts, "GL_PGI_misc_hints");
        GL_PGI_vertex_hints = loader.hasExtension(version, exts, "GL_PGI_vertex_hints");
        GL_REND_screen_coordinates = loader.hasExtension(version, exts, "GL_REND_screen_coordinates");
        GL_S3_s3tc = loader.hasExtension(version, exts, "GL_S3_s3tc");
        GL_SGIS_detail_texture = loader.hasExtension(version, exts, "GL_SGIS_detail_texture");
        GL_SGIS_fog_function = loader.hasExtension(version, exts, "GL_SGIS_fog_function");
        GL_SGIS_generate_mipmap = loader.hasExtension(version, exts, "GL_SGIS_generate_mipmap");
        GL_SGIS_multisample = loader.hasExtension(version, exts, "GL_SGIS_multisample");
        GL_SGIS_pixel_texture = loader.hasExtension(version, exts, "GL_SGIS_pixel_texture");
        GL_SGIS_point_line_texgen = loader.hasExtension(version, exts, "GL_SGIS_point_line_texgen");
        GL_SGIS_point_parameters = loader.hasExtension(version, exts, "GL_SGIS_point_parameters");
        GL_SGIS_sharpen_texture = loader.hasExtension(version, exts, "GL_SGIS_sharpen_texture");
        GL_SGIS_texture4D = loader.hasExtension(version, exts, "GL_SGIS_texture4D");
        GL_SGIS_texture_border_clamp = loader.hasExtension(version, exts, "GL_SGIS_texture_border_clamp");
        GL_SGIS_texture_color_mask = loader.hasExtension(version, exts, "GL_SGIS_texture_color_mask");
        GL_SGIS_texture_edge_clamp = loader.hasExtension(version, exts, "GL_SGIS_texture_edge_clamp");
        GL_SGIS_texture_filter4 = loader.hasExtension(version, exts, "GL_SGIS_texture_filter4");
        GL_SGIS_texture_lod = loader.hasExtension(version, exts, "GL_SGIS_texture_lod");
        GL_SGIS_texture_select = loader.hasExtension(version, exts, "GL_SGIS_texture_select");
        GL_SGIX_async = loader.hasExtension(version, exts, "GL_SGIX_async");
        GL_SGIX_async_histogram = loader.hasExtension(version, exts, "GL_SGIX_async_histogram");
        GL_SGIX_async_pixel = loader.hasExtension(version, exts, "GL_SGIX_async_pixel");
        GL_SGIX_blend_alpha_minmax = loader.hasExtension(version, exts, "GL_SGIX_blend_alpha_minmax");
        GL_SGIX_calligraphic_fragment = loader.hasExtension(version, exts, "GL_SGIX_calligraphic_fragment");
        GL_SGIX_clipmap = loader.hasExtension(version, exts, "GL_SGIX_clipmap");
        GL_SGIX_convolution_accuracy = loader.hasExtension(version, exts, "GL_SGIX_convolution_accuracy");
        GL_SGIX_depth_pass_instrument = loader.hasExtension(version, exts, "GL_SGIX_depth_pass_instrument");
        GL_SGIX_depth_texture = loader.hasExtension(version, exts, "GL_SGIX_depth_texture");
        GL_SGIX_flush_raster = loader.hasExtension(version, exts, "GL_SGIX_flush_raster");
        GL_SGIX_fog_offset = loader.hasExtension(version, exts, "GL_SGIX_fog_offset");
        GL_SGIX_fragment_lighting = loader.hasExtension(version, exts, "GL_SGIX_fragment_lighting");
        GL_SGIX_framezoom = loader.hasExtension(version, exts, "GL_SGIX_framezoom");
        GL_SGIX_igloo_interface = loader.hasExtension(version, exts, "GL_SGIX_igloo_interface");
        GL_SGIX_instruments = loader.hasExtension(version, exts, "GL_SGIX_instruments");
        GL_SGIX_interlace = loader.hasExtension(version, exts, "GL_SGIX_interlace");
        GL_SGIX_ir_instrument1 = loader.hasExtension(version, exts, "GL_SGIX_ir_instrument1");
        GL_SGIX_list_priority = loader.hasExtension(version, exts, "GL_SGIX_list_priority");
        GL_SGIX_pixel_texture = loader.hasExtension(version, exts, "GL_SGIX_pixel_texture");
        GL_SGIX_pixel_tiles = loader.hasExtension(version, exts, "GL_SGIX_pixel_tiles");
        GL_SGIX_polynomial_ffd = loader.hasExtension(version, exts, "GL_SGIX_polynomial_ffd");
        GL_SGIX_reference_plane = loader.hasExtension(version, exts, "GL_SGIX_reference_plane");
        GL_SGIX_resample = loader.hasExtension(version, exts, "GL_SGIX_resample");
        GL_SGIX_scalebias_hint = loader.hasExtension(version, exts, "GL_SGIX_scalebias_hint");
        GL_SGIX_shadow = loader.hasExtension(version, exts, "GL_SGIX_shadow");
        GL_SGIX_shadow_ambient = loader.hasExtension(version, exts, "GL_SGIX_shadow_ambient");
        GL_SGIX_sprite = loader.hasExtension(version, exts, "GL_SGIX_sprite");
        GL_SGIX_subsample = loader.hasExtension(version, exts, "GL_SGIX_subsample");
        GL_SGIX_tag_sample_buffer = loader.hasExtension(version, exts, "GL_SGIX_tag_sample_buffer");
        GL_SGIX_texture_add_env = loader.hasExtension(version, exts, "GL_SGIX_texture_add_env");
        GL_SGIX_texture_coordinate_clamp = loader.hasExtension(version, exts, "GL_SGIX_texture_coordinate_clamp");
        GL_SGIX_texture_lod_bias = loader.hasExtension(version, exts, "GL_SGIX_texture_lod_bias");
        GL_SGIX_texture_multi_buffer = loader.hasExtension(version, exts, "GL_SGIX_texture_multi_buffer");
        GL_SGIX_texture_scale_bias = loader.hasExtension(version, exts, "GL_SGIX_texture_scale_bias");
        GL_SGIX_vertex_preclip = loader.hasExtension(version, exts, "GL_SGIX_vertex_preclip");
        GL_SGIX_ycrcb = loader.hasExtension(version, exts, "GL_SGIX_ycrcb");
        GL_SGIX_ycrcb_subsample = loader.hasExtension(version, exts, "GL_SGIX_ycrcb_subsample");
        GL_SGIX_ycrcba = loader.hasExtension(version, exts, "GL_SGIX_ycrcba");
        GL_SGI_color_matrix = loader.hasExtension(version, exts, "GL_SGI_color_matrix");
        GL_SGI_color_table = loader.hasExtension(version, exts, "GL_SGI_color_table");
        GL_SGI_texture_color_table = loader.hasExtension(version, exts, "GL_SGI_texture_color_table");
        GL_SUNX_constant_data = loader.hasExtension(version, exts, "GL_SUNX_constant_data");
        GL_SUN_convolution_border_modes = loader.hasExtension(version, exts, "GL_SUN_convolution_border_modes");
        GL_SUN_global_alpha = loader.hasExtension(version, exts, "GL_SUN_global_alpha");
        GL_SUN_mesh_array = loader.hasExtension(version, exts, "GL_SUN_mesh_array");
        GL_SUN_slice_accum = loader.hasExtension(version, exts, "GL_SUN_slice_accum");
        GL_SUN_triangle_list = loader.hasExtension(version, exts, "GL_SUN_triangle_list");
        GL_SUN_vertex = loader.hasExtension(version, exts, "GL_SUN_vertex");
        GL_WIN_phong_shading = loader.hasExtension(version, exts, "GL_WIN_phong_shading");
        GL_WIN_specular_fog = loader.hasExtension(version, exts, "GL_WIN_specular_fog");
    }
}
