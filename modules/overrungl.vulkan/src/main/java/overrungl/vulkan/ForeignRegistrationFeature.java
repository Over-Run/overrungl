/*
 * MIT License
 *
 * Copyright (c) 2022-2025 Overrun Organization
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 */

// This file is auto-generated. DO NOT EDIT!
package overrungl.vulkan;
import org.graalvm.nativeimage.hosted.Feature;
import static org.graalvm.nativeimage.hosted.RuntimeForeignAccess.*;
class ForeignRegistrationFeature implements Feature {
    @Override public void duringSetup(DuringSetupAccess access) {
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateInstance);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyInstance);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkEnumeratePhysicalDevices);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetPhysicalDeviceFeatures);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetPhysicalDeviceFormatProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetPhysicalDeviceImageFormatProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetPhysicalDeviceProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetPhysicalDeviceQueueFamilyProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetPhysicalDeviceMemoryProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetInstanceProcAddr);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetDeviceProcAddr);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateDevice);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyDevice);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkEnumerateInstanceExtensionProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkEnumerateDeviceExtensionProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkEnumerateInstanceLayerProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkEnumerateDeviceLayerProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetDeviceQueue);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkQueueSubmit);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkQueueWaitIdle);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDeviceWaitIdle);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkAllocateMemory);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkFreeMemory);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkMapMemory);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkUnmapMemory);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkFlushMappedMemoryRanges);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkInvalidateMappedMemoryRanges);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetDeviceMemoryCommitment);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkBindBufferMemory);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkBindImageMemory);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetBufferMemoryRequirements);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetImageMemoryRequirements);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetImageSparseMemoryRequirements);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetPhysicalDeviceSparseImageFormatProperties);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkQueueBindSparse);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateFence);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyFence);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkResetFences);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetFenceStatus);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkWaitForFences);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateSemaphore);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroySemaphore);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateEvent);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyEvent);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetEventStatus);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkSetEvent);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkResetEvent);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateQueryPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyQueryPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetQueryPoolResults);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateBufferView);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyBufferView);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateImage);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyImage);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetImageSubresourceLayout);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateImageView);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyImageView);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateShaderModule);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyShaderModule);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreatePipelineCache);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyPipelineCache);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetPipelineCacheData);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkMergePipelineCaches);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateGraphicsPipelines);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateComputePipelines);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyPipeline);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreatePipelineLayout);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyPipelineLayout);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateSampler);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroySampler);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateDescriptorSetLayout);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyDescriptorSetLayout);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateDescriptorPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyDescriptorPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkResetDescriptorPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkAllocateDescriptorSets);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkFreeDescriptorSets);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkUpdateDescriptorSets);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateFramebuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyFramebuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateRenderPass);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyRenderPass);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkGetRenderAreaGranularity);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCreateCommandPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkDestroyCommandPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkResetCommandPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkAllocateCommandBuffers);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkFreeCommandBuffers);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkBeginCommandBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkEndCommandBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkResetCommandBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdBindPipeline);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetViewport);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetScissor);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetLineWidth);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetDepthBias);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetBlendConstants);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetDepthBounds);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetStencilCompareMask);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetStencilWriteMask);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetStencilReference);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdBindDescriptorSets);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdBindIndexBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdBindVertexBuffers);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdDraw);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdDrawIndexed);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdDrawIndirect);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdDrawIndexedIndirect);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdDispatch);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdDispatchIndirect);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdCopyBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdCopyImage);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdBlitImage);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdCopyBufferToImage);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdCopyImageToBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdUpdateBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdFillBuffer);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdClearColorImage);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdClearDepthStencilImage);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdClearAttachments);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdResolveImage);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdSetEvent);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdResetEvent);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdWaitEvents);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdPipelineBarrier);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdBeginQuery);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdEndQuery);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdResetQueryPool);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdWriteTimestamp);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdCopyQueryPoolResults);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdPushConstants);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdBeginRenderPass);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdNextSubpass);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdEndRenderPass);
        registerForDowncall(overrungl.vulkan.VK10.Descriptors.FD_vkCmdExecuteCommands);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkEnumerateInstanceVersion);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkBindBufferMemory2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkBindImageMemory2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetDeviceGroupPeerMemoryFeatures);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkCmdSetDeviceMask);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkCmdDispatchBase);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkEnumeratePhysicalDeviceGroups);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetImageMemoryRequirements2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetBufferMemoryRequirements2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetImageSparseMemoryRequirements2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceFeatures2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceProperties2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceFormatProperties2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceImageFormatProperties2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceQueueFamilyProperties2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceMemoryProperties2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceSparseImageFormatProperties2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkTrimCommandPool);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetDeviceQueue2);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkCreateSamplerYcbcrConversion);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkDestroySamplerYcbcrConversion);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkCreateDescriptorUpdateTemplate);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkDestroyDescriptorUpdateTemplate);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkUpdateDescriptorSetWithTemplate);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceExternalBufferProperties);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceExternalFenceProperties);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetPhysicalDeviceExternalSemaphoreProperties);
        registerForDowncall(overrungl.vulkan.VK11.Descriptors.FD_vkGetDescriptorSetLayoutSupport);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkCmdDrawIndirectCount);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkCmdDrawIndexedIndirectCount);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkCreateRenderPass2);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkCmdBeginRenderPass2);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkCmdNextSubpass2);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkCmdEndRenderPass2);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkResetQueryPool);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkGetSemaphoreCounterValue);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkWaitSemaphores);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkSignalSemaphore);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkGetBufferDeviceAddress);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkGetBufferOpaqueCaptureAddress);
        registerForDowncall(overrungl.vulkan.VK12.Descriptors.FD_vkGetDeviceMemoryOpaqueCaptureAddress);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkGetPhysicalDeviceToolProperties);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCreatePrivateDataSlot);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkDestroyPrivateDataSlot);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkSetPrivateData);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkGetPrivateData);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetEvent2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdResetEvent2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdWaitEvents2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdPipelineBarrier2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdWriteTimestamp2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkQueueSubmit2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdCopyBuffer2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdCopyImage2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdCopyBufferToImage2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdCopyImageToBuffer2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdBlitImage2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdResolveImage2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdBeginRendering);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdEndRendering);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetCullMode);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetFrontFace);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetPrimitiveTopology);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetViewportWithCount);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetScissorWithCount);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdBindVertexBuffers2);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetDepthTestEnable);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetDepthWriteEnable);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetDepthCompareOp);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetDepthBoundsTestEnable);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetStencilTestEnable);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetStencilOp);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetRasterizerDiscardEnable);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetDepthBiasEnable);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkCmdSetPrimitiveRestartEnable);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkGetDeviceBufferMemoryRequirements);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkGetDeviceImageMemoryRequirements);
        registerForDowncall(overrungl.vulkan.VK13.Descriptors.FD_vkGetDeviceImageSparseMemoryRequirements);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdSetLineStipple);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkMapMemory2);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkUnmapMemory2);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdBindIndexBuffer2);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkGetRenderingAreaGranularity);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkGetDeviceImageSubresourceLayout);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkGetImageSubresourceLayout2);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdPushDescriptorSet);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdPushDescriptorSetWithTemplate);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdSetRenderingAttachmentLocations);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdSetRenderingInputAttachmentIndices);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdBindDescriptorSets2);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdPushConstants2);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdPushDescriptorSet2);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCmdPushDescriptorSetWithTemplate2);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCopyMemoryToImage);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCopyImageToMemory);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkCopyImageToImage);
        registerForDowncall(overrungl.vulkan.VK14.Descriptors.FD_vkTransitionImageLayout);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSurface.Descriptors.FD_vkDestroySurfaceKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSurface.Descriptors.FD_vkGetPhysicalDeviceSurfaceSupportKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSurface.Descriptors.FD_vkGetPhysicalDeviceSurfaceCapabilitiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSurface.Descriptors.FD_vkGetPhysicalDeviceSurfaceFormatsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSurface.Descriptors.FD_vkGetPhysicalDeviceSurfacePresentModesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkCreateSwapchainKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkDestroySwapchainKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkGetSwapchainImagesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkAcquireNextImageKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkQueuePresentKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkGetDeviceGroupPresentCapabilitiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkGetDeviceGroupSurfacePresentModesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkGetPhysicalDevicePresentRectanglesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSwapchain.Descriptors.FD_vkAcquireNextImage2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDisplay.Descriptors.FD_vkGetPhysicalDeviceDisplayPropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDisplay.Descriptors.FD_vkGetPhysicalDeviceDisplayPlanePropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDisplay.Descriptors.FD_vkGetDisplayPlaneSupportedDisplaysKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDisplay.Descriptors.FD_vkGetDisplayModePropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDisplay.Descriptors.FD_vkCreateDisplayModeKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDisplay.Descriptors.FD_vkGetDisplayPlaneCapabilitiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDisplay.Descriptors.FD_vkCreateDisplayPlaneSurfaceKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDisplaySwapchain.Descriptors.FD_vkCreateSharedSwapchainsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRXlibSurface.Descriptors.FD_vkCreateXlibSurfaceKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRXlibSurface.Descriptors.FD_vkGetPhysicalDeviceXlibPresentationSupportKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRXcbSurface.Descriptors.FD_vkCreateXcbSurfaceKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRXcbSurface.Descriptors.FD_vkGetPhysicalDeviceXcbPresentationSupportKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRWaylandSurface.Descriptors.FD_vkCreateWaylandSurfaceKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRWaylandSurface.Descriptors.FD_vkGetPhysicalDeviceWaylandPresentationSupportKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAndroidSurface.Descriptors.FD_vkCreateAndroidSurfaceKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRWin32Surface.Descriptors.FD_vkCreateWin32SurfaceKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRWin32Surface.Descriptors.FD_vkGetPhysicalDeviceWin32PresentationSupportKHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugReport.Descriptors.FD_vkCreateDebugReportCallbackEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugReport.Descriptors.FD_vkDestroyDebugReportCallbackEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugReport.Descriptors.FD_vkDebugReportMessageEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugMarker.Descriptors.FD_vkDebugMarkerSetObjectTagEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugMarker.Descriptors.FD_vkDebugMarkerSetObjectNameEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugMarker.Descriptors.FD_vkCmdDebugMarkerBeginEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugMarker.Descriptors.FD_vkCmdDebugMarkerEndEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugMarker.Descriptors.FD_vkCmdDebugMarkerInsertEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkGetPhysicalDeviceVideoCapabilitiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkGetPhysicalDeviceVideoFormatPropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkCreateVideoSessionKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkDestroyVideoSessionKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkGetVideoSessionMemoryRequirementsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkBindVideoSessionMemoryKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkCreateVideoSessionParametersKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkUpdateVideoSessionParametersKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkDestroyVideoSessionParametersKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkCmdBeginVideoCodingKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkCmdEndVideoCodingKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoQueue.Descriptors.FD_vkCmdControlVideoCodingKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoDecodeQueue.Descriptors.FD_vkCmdDecodeVideoKHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTTransformFeedback.Descriptors.FD_vkCmdBindTransformFeedbackBuffersEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTTransformFeedback.Descriptors.FD_vkCmdBeginTransformFeedbackEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTTransformFeedback.Descriptors.FD_vkCmdEndTransformFeedbackEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTTransformFeedback.Descriptors.FD_vkCmdBeginQueryIndexedEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTTransformFeedback.Descriptors.FD_vkCmdEndQueryIndexedEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTTransformFeedback.Descriptors.FD_vkCmdDrawIndirectByteCountEXT);
        registerForDowncall(overrungl.vulkan.nvx.VKNVXBinaryImport.Descriptors.FD_vkCreateCuModuleNVX);
        registerForDowncall(overrungl.vulkan.nvx.VKNVXBinaryImport.Descriptors.FD_vkCreateCuFunctionNVX);
        registerForDowncall(overrungl.vulkan.nvx.VKNVXBinaryImport.Descriptors.FD_vkDestroyCuModuleNVX);
        registerForDowncall(overrungl.vulkan.nvx.VKNVXBinaryImport.Descriptors.FD_vkDestroyCuFunctionNVX);
        registerForDowncall(overrungl.vulkan.nvx.VKNVXBinaryImport.Descriptors.FD_vkCmdCuLaunchKernelNVX);
        registerForDowncall(overrungl.vulkan.nvx.VKNVXImageViewHandle.Descriptors.FD_vkGetImageViewHandleNVX);
        registerForDowncall(overrungl.vulkan.nvx.VKNVXImageViewHandle.Descriptors.FD_vkGetImageViewHandle64NVX);
        registerForDowncall(overrungl.vulkan.nvx.VKNVXImageViewHandle.Descriptors.FD_vkGetImageViewAddressNVX);
        registerForDowncall(overrungl.vulkan.amd.VKAMDDrawIndirectCount.Descriptors.FD_vkCmdDrawIndirectCountAMD);
        registerForDowncall(overrungl.vulkan.amd.VKAMDDrawIndirectCount.Descriptors.FD_vkCmdDrawIndexedIndirectCountAMD);
        registerForDowncall(overrungl.vulkan.amd.VKAMDShaderInfo.Descriptors.FD_vkGetShaderInfoAMD);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDynamicRendering.Descriptors.FD_vkCmdBeginRenderingKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDynamicRendering.Descriptors.FD_vkCmdEndRenderingKHR);
        registerForDowncall(overrungl.vulkan.ggp.VKGGPStreamDescriptorSurface.Descriptors.FD_vkCreateStreamDescriptorSurfaceGGP);
        registerForDowncall(overrungl.vulkan.nv.VKNVExternalMemoryCapabilities.Descriptors.FD_vkGetPhysicalDeviceExternalImageFormatPropertiesNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVExternalMemoryWin32.Descriptors.FD_vkGetMemoryWin32HandleNV);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetPhysicalDeviceProperties2.Descriptors.FD_vkGetPhysicalDeviceFeatures2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetPhysicalDeviceProperties2.Descriptors.FD_vkGetPhysicalDeviceProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetPhysicalDeviceProperties2.Descriptors.FD_vkGetPhysicalDeviceFormatProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetPhysicalDeviceProperties2.Descriptors.FD_vkGetPhysicalDeviceImageFormatProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetPhysicalDeviceProperties2.Descriptors.FD_vkGetPhysicalDeviceQueueFamilyProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetPhysicalDeviceProperties2.Descriptors.FD_vkGetPhysicalDeviceMemoryProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetPhysicalDeviceProperties2.Descriptors.FD_vkGetPhysicalDeviceSparseImageFormatProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeviceGroup.Descriptors.FD_vkGetDeviceGroupPeerMemoryFeaturesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeviceGroup.Descriptors.FD_vkCmdSetDeviceMaskKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeviceGroup.Descriptors.FD_vkCmdDispatchBaseKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeviceGroup.Descriptors.FD_vkGetDeviceGroupPresentCapabilitiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeviceGroup.Descriptors.FD_vkGetDeviceGroupSurfacePresentModesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeviceGroup.Descriptors.FD_vkGetPhysicalDevicePresentRectanglesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeviceGroup.Descriptors.FD_vkAcquireNextImage2KHR);
        registerForDowncall(overrungl.vulkan.nn.VKNNViSurface.Descriptors.FD_vkCreateViSurfaceNN);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance1.Descriptors.FD_vkTrimCommandPoolKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeviceGroupCreation.Descriptors.FD_vkEnumeratePhysicalDeviceGroupsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalMemoryCapabilities.Descriptors.FD_vkGetPhysicalDeviceExternalBufferPropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalMemoryWin32.Descriptors.FD_vkGetMemoryWin32HandleKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalMemoryWin32.Descriptors.FD_vkGetMemoryWin32HandlePropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalMemoryFd.Descriptors.FD_vkGetMemoryFdKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalMemoryFd.Descriptors.FD_vkGetMemoryFdPropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalSemaphoreCapabilities.Descriptors.FD_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalSemaphoreWin32.Descriptors.FD_vkImportSemaphoreWin32HandleKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalSemaphoreWin32.Descriptors.FD_vkGetSemaphoreWin32HandleKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalSemaphoreFd.Descriptors.FD_vkImportSemaphoreFdKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalSemaphoreFd.Descriptors.FD_vkGetSemaphoreFdKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPushDescriptor.Descriptors.FD_vkCmdPushDescriptorSetKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPushDescriptor.Descriptors.FD_vkCmdPushDescriptorSetWithTemplateKHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTConditionalRendering.Descriptors.FD_vkCmdBeginConditionalRenderingEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTConditionalRendering.Descriptors.FD_vkCmdEndConditionalRenderingEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDescriptorUpdateTemplate.Descriptors.FD_vkCreateDescriptorUpdateTemplateKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDescriptorUpdateTemplate.Descriptors.FD_vkDestroyDescriptorUpdateTemplateKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDescriptorUpdateTemplate.Descriptors.FD_vkUpdateDescriptorSetWithTemplateKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDescriptorUpdateTemplate.Descriptors.FD_vkCmdPushDescriptorSetWithTemplateKHR);
        registerForDowncall(overrungl.vulkan.nv.VKNVClipSpaceWScaling.Descriptors.FD_vkCmdSetViewportWScalingNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDirectModeDisplay.Descriptors.FD_vkReleaseDisplayEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTAcquireXlibDisplay.Descriptors.FD_vkAcquireXlibDisplayEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTAcquireXlibDisplay.Descriptors.FD_vkGetRandROutputDisplayEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDisplaySurfaceCounter.Descriptors.FD_vkGetPhysicalDeviceSurfaceCapabilities2EXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDisplayControl.Descriptors.FD_vkDisplayPowerControlEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDisplayControl.Descriptors.FD_vkRegisterDeviceEventEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDisplayControl.Descriptors.FD_vkRegisterDisplayEventEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDisplayControl.Descriptors.FD_vkGetSwapchainCounterEXT);
        registerForDowncall(overrungl.vulkan.google.VKGOOGLEDisplayTiming.Descriptors.FD_vkGetRefreshCycleDurationGOOGLE);
        registerForDowncall(overrungl.vulkan.google.VKGOOGLEDisplayTiming.Descriptors.FD_vkGetPastPresentationTimingGOOGLE);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDiscardRectangles.Descriptors.FD_vkCmdSetDiscardRectangleEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDiscardRectangles.Descriptors.FD_vkCmdSetDiscardRectangleEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDiscardRectangles.Descriptors.FD_vkCmdSetDiscardRectangleModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTHdrMetadata.Descriptors.FD_vkSetHdrMetadataEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCreateRenderpass2.Descriptors.FD_vkCreateRenderPass2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCreateRenderpass2.Descriptors.FD_vkCmdBeginRenderPass2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCreateRenderpass2.Descriptors.FD_vkCmdNextSubpass2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCreateRenderpass2.Descriptors.FD_vkCmdEndRenderPass2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSharedPresentableImage.Descriptors.FD_vkGetSwapchainStatusKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalFenceCapabilities.Descriptors.FD_vkGetPhysicalDeviceExternalFencePropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalFenceWin32.Descriptors.FD_vkImportFenceWin32HandleKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalFenceWin32.Descriptors.FD_vkGetFenceWin32HandleKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalFenceFd.Descriptors.FD_vkImportFenceFdKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRExternalFenceFd.Descriptors.FD_vkGetFenceFdKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPerformanceQuery.Descriptors.FD_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPerformanceQuery.Descriptors.FD_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPerformanceQuery.Descriptors.FD_vkAcquireProfilingLockKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPerformanceQuery.Descriptors.FD_vkReleaseProfilingLockKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetSurfaceCapabilities2.Descriptors.FD_vkGetPhysicalDeviceSurfaceCapabilities2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetSurfaceCapabilities2.Descriptors.FD_vkGetPhysicalDeviceSurfaceFormats2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetDisplayProperties2.Descriptors.FD_vkGetPhysicalDeviceDisplayProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetDisplayProperties2.Descriptors.FD_vkGetPhysicalDeviceDisplayPlaneProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetDisplayProperties2.Descriptors.FD_vkGetDisplayModeProperties2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetDisplayProperties2.Descriptors.FD_vkGetDisplayPlaneCapabilities2KHR);
        registerForDowncall(overrungl.vulkan.mvk.VKMVKIosSurface.Descriptors.FD_vkCreateIOSSurfaceMVK);
        registerForDowncall(overrungl.vulkan.mvk.VKMVKMacosSurface.Descriptors.FD_vkCreateMacOSSurfaceMVK);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkSetDebugUtilsObjectNameEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkSetDebugUtilsObjectTagEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkQueueBeginDebugUtilsLabelEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkQueueEndDebugUtilsLabelEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkQueueInsertDebugUtilsLabelEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkCmdBeginDebugUtilsLabelEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkCmdEndDebugUtilsLabelEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkCmdInsertDebugUtilsLabelEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkCreateDebugUtilsMessengerEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkDestroyDebugUtilsMessengerEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDebugUtils.Descriptors.FD_vkSubmitDebugUtilsMessageEXT);
        registerForDowncall(overrungl.vulkan.android.VKANDROIDExternalMemoryAndroidHardwareBuffer.Descriptors.FD_vkGetAndroidHardwareBufferPropertiesANDROID);
        registerForDowncall(overrungl.vulkan.android.VKANDROIDExternalMemoryAndroidHardwareBuffer.Descriptors.FD_vkGetMemoryAndroidHardwareBufferANDROID);
        registerForDowncall(overrungl.vulkan.amdx.VKAMDXShaderEnqueue.Descriptors.FD_vkCreateExecutionGraphPipelinesAMDX);
        registerForDowncall(overrungl.vulkan.amdx.VKAMDXShaderEnqueue.Descriptors.FD_vkGetExecutionGraphPipelineScratchSizeAMDX);
        registerForDowncall(overrungl.vulkan.amdx.VKAMDXShaderEnqueue.Descriptors.FD_vkGetExecutionGraphPipelineNodeIndexAMDX);
        registerForDowncall(overrungl.vulkan.amdx.VKAMDXShaderEnqueue.Descriptors.FD_vkCmdInitializeGraphScratchMemoryAMDX);
        registerForDowncall(overrungl.vulkan.amdx.VKAMDXShaderEnqueue.Descriptors.FD_vkCmdDispatchGraphAMDX);
        registerForDowncall(overrungl.vulkan.amdx.VKAMDXShaderEnqueue.Descriptors.FD_vkCmdDispatchGraphIndirectAMDX);
        registerForDowncall(overrungl.vulkan.amdx.VKAMDXShaderEnqueue.Descriptors.FD_vkCmdDispatchGraphIndirectCountAMDX);
        registerForDowncall(overrungl.vulkan.ext.VKEXTSampleLocations.Descriptors.FD_vkCmdSetSampleLocationsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTSampleLocations.Descriptors.FD_vkGetPhysicalDeviceMultisamplePropertiesEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetMemoryRequirements2.Descriptors.FD_vkGetImageMemoryRequirements2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetMemoryRequirements2.Descriptors.FD_vkGetBufferMemoryRequirements2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRGetMemoryRequirements2.Descriptors.FD_vkGetImageSparseMemoryRequirements2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCreateAccelerationStructureKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkDestroyAccelerationStructureKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCmdBuildAccelerationStructuresKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCmdBuildAccelerationStructuresIndirectKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkBuildAccelerationStructuresKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCopyAccelerationStructureKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCopyAccelerationStructureToMemoryKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCopyMemoryToAccelerationStructureKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkWriteAccelerationStructuresPropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCmdCopyAccelerationStructureKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCmdCopyAccelerationStructureToMemoryKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCmdCopyMemoryToAccelerationStructureKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkGetAccelerationStructureDeviceAddressKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkCmdWriteAccelerationStructuresPropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkGetDeviceAccelerationStructureCompatibilityKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRAccelerationStructure.Descriptors.FD_vkGetAccelerationStructureBuildSizesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRRayTracingPipeline.Descriptors.FD_vkCmdTraceRaysKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRRayTracingPipeline.Descriptors.FD_vkCreateRayTracingPipelinesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRRayTracingPipeline.Descriptors.FD_vkGetRayTracingShaderGroupHandlesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRRayTracingPipeline.Descriptors.FD_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRRayTracingPipeline.Descriptors.FD_vkCmdTraceRaysIndirectKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRRayTracingPipeline.Descriptors.FD_vkGetRayTracingShaderGroupStackSizeKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRRayTracingPipeline.Descriptors.FD_vkCmdSetRayTracingPipelineStackSizeKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSamplerYcbcrConversion.Descriptors.FD_vkCreateSamplerYcbcrConversionKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSamplerYcbcrConversion.Descriptors.FD_vkDestroySamplerYcbcrConversionKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRBindMemory2.Descriptors.FD_vkBindBufferMemory2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRBindMemory2.Descriptors.FD_vkBindImageMemory2KHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTImageDrmFormatModifier.Descriptors.FD_vkGetImageDrmFormatModifierPropertiesEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTValidationCache.Descriptors.FD_vkCreateValidationCacheEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTValidationCache.Descriptors.FD_vkDestroyValidationCacheEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTValidationCache.Descriptors.FD_vkMergeValidationCachesEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTValidationCache.Descriptors.FD_vkGetValidationCacheDataEXT);
        registerForDowncall(overrungl.vulkan.nv.VKNVShadingRateImage.Descriptors.FD_vkCmdBindShadingRateImageNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVShadingRateImage.Descriptors.FD_vkCmdSetViewportShadingRatePaletteNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVShadingRateImage.Descriptors.FD_vkCmdSetCoarseSampleOrderNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkCreateAccelerationStructureNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkDestroyAccelerationStructureNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkGetAccelerationStructureMemoryRequirementsNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkBindAccelerationStructureMemoryNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkCmdBuildAccelerationStructureNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkCmdCopyAccelerationStructureNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkCmdTraceRaysNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkCreateRayTracingPipelinesNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkGetRayTracingShaderGroupHandlesNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkGetAccelerationStructureHandleNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkCmdWriteAccelerationStructuresPropertiesNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVRayTracing.Descriptors.FD_vkCompileDeferredNV);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance3.Descriptors.FD_vkGetDescriptorSetLayoutSupportKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDrawIndirectCount.Descriptors.FD_vkCmdDrawIndirectCountKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDrawIndirectCount.Descriptors.FD_vkCmdDrawIndexedIndirectCountKHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExternalMemoryHost.Descriptors.FD_vkGetMemoryHostPointerPropertiesEXT);
        registerForDowncall(overrungl.vulkan.amd.VKAMDBufferMarker.Descriptors.FD_vkCmdWriteBufferMarkerAMD);
        registerForDowncall(overrungl.vulkan.amd.VKAMDBufferMarker.Descriptors.FD_vkCmdWriteBufferMarker2AMD);
        registerForDowncall(overrungl.vulkan.ext.VKEXTCalibratedTimestamps.Descriptors.FD_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTCalibratedTimestamps.Descriptors.FD_vkGetCalibratedTimestampsEXT);
        registerForDowncall(overrungl.vulkan.nv.VKNVMeshShader.Descriptors.FD_vkCmdDrawMeshTasksNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVMeshShader.Descriptors.FD_vkCmdDrawMeshTasksIndirectNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVMeshShader.Descriptors.FD_vkCmdDrawMeshTasksIndirectCountNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVScissorExclusive.Descriptors.FD_vkCmdSetExclusiveScissorEnableNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVScissorExclusive.Descriptors.FD_vkCmdSetExclusiveScissorNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceDiagnosticCheckpoints.Descriptors.FD_vkCmdSetCheckpointNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceDiagnosticCheckpoints.Descriptors.FD_vkGetQueueCheckpointDataNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceDiagnosticCheckpoints.Descriptors.FD_vkGetQueueCheckpointData2NV);
        registerForDowncall(overrungl.vulkan.khr.VKKHRTimelineSemaphore.Descriptors.FD_vkGetSemaphoreCounterValueKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRTimelineSemaphore.Descriptors.FD_vkWaitSemaphoresKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRTimelineSemaphore.Descriptors.FD_vkSignalSemaphoreKHR);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkInitializePerformanceApiINTEL);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkUninitializePerformanceApiINTEL);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkCmdSetPerformanceMarkerINTEL);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkCmdSetPerformanceStreamMarkerINTEL);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkCmdSetPerformanceOverrideINTEL);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkAcquirePerformanceConfigurationINTEL);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkReleasePerformanceConfigurationINTEL);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkQueueSetPerformanceConfigurationINTEL);
        registerForDowncall(overrungl.vulkan.intel.VKINTELPerformanceQuery.Descriptors.FD_vkGetPerformanceParameterINTEL);
        registerForDowncall(overrungl.vulkan.amd.VKAMDDisplayNativeHdr.Descriptors.FD_vkSetLocalDimmingAMD);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIAImagepipeSurface.Descriptors.FD_vkCreateImagePipeSurfaceFUCHSIA);
        registerForDowncall(overrungl.vulkan.ext.VKEXTMetalSurface.Descriptors.FD_vkCreateMetalSurfaceEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRFragmentShadingRate.Descriptors.FD_vkGetPhysicalDeviceFragmentShadingRatesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRFragmentShadingRate.Descriptors.FD_vkCmdSetFragmentShadingRateKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDynamicRenderingLocalRead.Descriptors.FD_vkCmdSetRenderingAttachmentLocationsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDynamicRenderingLocalRead.Descriptors.FD_vkCmdSetRenderingInputAttachmentIndicesKHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTBufferDeviceAddress.Descriptors.FD_vkGetBufferDeviceAddressEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTToolingInfo.Descriptors.FD_vkGetPhysicalDeviceToolPropertiesEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPresentWait.Descriptors.FD_vkWaitForPresentKHR);
        registerForDowncall(overrungl.vulkan.nv.VKNVCooperativeMatrix.Descriptors.FD_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVCoverageReductionMode.Descriptors.FD_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTFullScreenExclusive.Descriptors.FD_vkGetPhysicalDeviceSurfacePresentModes2EXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTFullScreenExclusive.Descriptors.FD_vkAcquireFullScreenExclusiveModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTFullScreenExclusive.Descriptors.FD_vkReleaseFullScreenExclusiveModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTFullScreenExclusive.Descriptors.FD_vkGetDeviceGroupSurfacePresentModes2EXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTHeadlessSurface.Descriptors.FD_vkCreateHeadlessSurfaceEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRBufferDeviceAddress.Descriptors.FD_vkGetBufferDeviceAddressKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRBufferDeviceAddress.Descriptors.FD_vkGetBufferOpaqueCaptureAddressKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRBufferDeviceAddress.Descriptors.FD_vkGetDeviceMemoryOpaqueCaptureAddressKHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTLineRasterization.Descriptors.FD_vkCmdSetLineStippleEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTHostQueryReset.Descriptors.FD_vkResetQueryPoolEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetCullModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetFrontFaceEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetPrimitiveTopologyEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetViewportWithCountEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetScissorWithCountEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdBindVertexBuffers2EXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetDepthTestEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetDepthWriteEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetDepthCompareOpEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetDepthBoundsTestEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetStencilTestEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState.Descriptors.FD_vkCmdSetStencilOpEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeferredHostOperations.Descriptors.FD_vkCreateDeferredOperationKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeferredHostOperations.Descriptors.FD_vkDestroyDeferredOperationKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeferredHostOperations.Descriptors.FD_vkGetDeferredOperationMaxConcurrencyKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeferredHostOperations.Descriptors.FD_vkGetDeferredOperationResultKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRDeferredHostOperations.Descriptors.FD_vkDeferredOperationJoinKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPipelineExecutableProperties.Descriptors.FD_vkGetPipelineExecutablePropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPipelineExecutableProperties.Descriptors.FD_vkGetPipelineExecutableStatisticsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPipelineExecutableProperties.Descriptors.FD_vkGetPipelineExecutableInternalRepresentationsKHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTHostImageCopy.Descriptors.FD_vkCopyMemoryToImageEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTHostImageCopy.Descriptors.FD_vkCopyImageToMemoryEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTHostImageCopy.Descriptors.FD_vkCopyImageToImageEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTHostImageCopy.Descriptors.FD_vkTransitionImageLayoutEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTHostImageCopy.Descriptors.FD_vkGetImageSubresourceLayout2EXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMapMemory2.Descriptors.FD_vkMapMemory2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMapMemory2.Descriptors.FD_vkUnmapMemory2KHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTSwapchainMaintenance1.Descriptors.FD_vkReleaseSwapchainImagesEXT);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommands.Descriptors.FD_vkGetGeneratedCommandsMemoryRequirementsNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommands.Descriptors.FD_vkCmdPreprocessGeneratedCommandsNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommands.Descriptors.FD_vkCmdExecuteGeneratedCommandsNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommands.Descriptors.FD_vkCmdBindPipelineShaderGroupNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommands.Descriptors.FD_vkCreateIndirectCommandsLayoutNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommands.Descriptors.FD_vkDestroyIndirectCommandsLayoutNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDepthBiasControl.Descriptors.FD_vkCmdSetDepthBias2EXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTAcquireDrmDisplay.Descriptors.FD_vkAcquireDrmDisplayEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTAcquireDrmDisplay.Descriptors.FD_vkGetDrmDisplayEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTPrivateData.Descriptors.FD_vkCreatePrivateDataSlotEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTPrivateData.Descriptors.FD_vkDestroyPrivateDataSlotEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTPrivateData.Descriptors.FD_vkSetPrivateDataEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTPrivateData.Descriptors.FD_vkGetPrivateDataEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoEncodeQueue.Descriptors.FD_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoEncodeQueue.Descriptors.FD_vkGetEncodedVideoSessionParametersKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRVideoEncodeQueue.Descriptors.FD_vkCmdEncodeVideoKHR);
        registerForDowncall(overrungl.vulkan.nv.VKNVCudaKernelLaunch.Descriptors.FD_vkCreateCudaModuleNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVCudaKernelLaunch.Descriptors.FD_vkGetCudaModuleCacheNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVCudaKernelLaunch.Descriptors.FD_vkCreateCudaFunctionNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVCudaKernelLaunch.Descriptors.FD_vkDestroyCudaModuleNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVCudaKernelLaunch.Descriptors.FD_vkDestroyCudaFunctionNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVCudaKernelLaunch.Descriptors.FD_vkCmdCudaLaunchKernelNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTMetalObjects.Descriptors.FD_vkExportMetalObjectsEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSynchronization2.Descriptors.FD_vkCmdSetEvent2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSynchronization2.Descriptors.FD_vkCmdResetEvent2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSynchronization2.Descriptors.FD_vkCmdWaitEvents2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSynchronization2.Descriptors.FD_vkCmdPipelineBarrier2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSynchronization2.Descriptors.FD_vkCmdWriteTimestamp2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRSynchronization2.Descriptors.FD_vkQueueSubmit2KHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkGetDescriptorSetLayoutSizeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkGetDescriptorSetLayoutBindingOffsetEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkGetDescriptorEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkCmdBindDescriptorBuffersEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkCmdSetDescriptorBufferOffsetsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkCmdBindDescriptorBufferEmbeddedSamplersEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkGetBufferOpaqueCaptureDescriptorDataEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkGetImageOpaqueCaptureDescriptorDataEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkGetImageViewOpaqueCaptureDescriptorDataEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkGetSamplerOpaqueCaptureDescriptorDataEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDescriptorBuffer.Descriptors.FD_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT);
        registerForDowncall(overrungl.vulkan.nv.VKNVFragmentShadingRateEnums.Descriptors.FD_vkCmdSetFragmentShadingRateEnumNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTMeshShader.Descriptors.FD_vkCmdDrawMeshTasksEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTMeshShader.Descriptors.FD_vkCmdDrawMeshTasksIndirectEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTMeshShader.Descriptors.FD_vkCmdDrawMeshTasksIndirectCountEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCopyCommands2.Descriptors.FD_vkCmdCopyBuffer2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCopyCommands2.Descriptors.FD_vkCmdCopyImage2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCopyCommands2.Descriptors.FD_vkCmdCopyBufferToImage2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCopyCommands2.Descriptors.FD_vkCmdCopyImageToBuffer2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCopyCommands2.Descriptors.FD_vkCmdBlitImage2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCopyCommands2.Descriptors.FD_vkCmdResolveImage2KHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTImageCompressionControl.Descriptors.FD_vkGetImageSubresourceLayout2EXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceFault.Descriptors.FD_vkGetDeviceFaultInfoEXT);
        registerForDowncall(overrungl.vulkan.nv.VKNVAcquireWinrtDisplay.Descriptors.FD_vkAcquireWinrtDisplayNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVAcquireWinrtDisplay.Descriptors.FD_vkGetWinrtDisplayNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDirectfbSurface.Descriptors.FD_vkCreateDirectFBSurfaceEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDirectfbSurface.Descriptors.FD_vkGetPhysicalDeviceDirectFBPresentationSupportEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTVertexInputDynamicState.Descriptors.FD_vkCmdSetVertexInputEXT);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIAExternalMemory.Descriptors.FD_vkGetMemoryZirconHandleFUCHSIA);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIAExternalMemory.Descriptors.FD_vkGetMemoryZirconHandlePropertiesFUCHSIA);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIAExternalSemaphore.Descriptors.FD_vkImportSemaphoreZirconHandleFUCHSIA);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIAExternalSemaphore.Descriptors.FD_vkGetSemaphoreZirconHandleFUCHSIA);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIABufferCollection.Descriptors.FD_vkCreateBufferCollectionFUCHSIA);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIABufferCollection.Descriptors.FD_vkSetBufferCollectionImageConstraintsFUCHSIA);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIABufferCollection.Descriptors.FD_vkSetBufferCollectionBufferConstraintsFUCHSIA);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIABufferCollection.Descriptors.FD_vkDestroyBufferCollectionFUCHSIA);
        registerForDowncall(overrungl.vulkan.fuchsia.VKFUCHSIABufferCollection.Descriptors.FD_vkGetBufferCollectionPropertiesFUCHSIA);
        registerForDowncall(overrungl.vulkan.huawei.VKHUAWEISubpassShading.Descriptors.FD_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI);
        registerForDowncall(overrungl.vulkan.huawei.VKHUAWEISubpassShading.Descriptors.FD_vkCmdSubpassShadingHUAWEI);
        registerForDowncall(overrungl.vulkan.huawei.VKHUAWEIInvocationMask.Descriptors.FD_vkCmdBindInvocationMaskHUAWEI);
        registerForDowncall(overrungl.vulkan.nv.VKNVExternalMemoryRdma.Descriptors.FD_vkGetMemoryRemoteAddressNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTPipelineProperties.Descriptors.FD_vkGetPipelinePropertiesEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState2.Descriptors.FD_vkCmdSetPatchControlPointsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState2.Descriptors.FD_vkCmdSetRasterizerDiscardEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState2.Descriptors.FD_vkCmdSetDepthBiasEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState2.Descriptors.FD_vkCmdSetLogicOpEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState2.Descriptors.FD_vkCmdSetPrimitiveRestartEnableEXT);
        registerForDowncall(overrungl.vulkan.qnx.VKQNXScreenSurface.Descriptors.FD_vkCreateScreenSurfaceQNX);
        registerForDowncall(overrungl.vulkan.qnx.VKQNXScreenSurface.Descriptors.FD_vkGetPhysicalDeviceScreenPresentationSupportQNX);
        registerForDowncall(overrungl.vulkan.ext.VKEXTColorWriteEnable.Descriptors.FD_vkCmdSetColorWriteEnableEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRRayTracingMaintenance1.Descriptors.FD_vkCmdTraceRaysIndirect2KHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTMultiDraw.Descriptors.FD_vkCmdDrawMultiEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTMultiDraw.Descriptors.FD_vkCmdDrawMultiIndexedEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCreateMicromapEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkDestroyMicromapEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCmdBuildMicromapsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkBuildMicromapsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCopyMicromapEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCopyMicromapToMemoryEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCopyMemoryToMicromapEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkWriteMicromapsPropertiesEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCmdCopyMicromapEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCmdCopyMicromapToMemoryEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCmdCopyMemoryToMicromapEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkCmdWriteMicromapsPropertiesEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkGetDeviceMicromapCompatibilityEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTOpacityMicromap.Descriptors.FD_vkGetMicromapBuildSizesEXT);
        registerForDowncall(overrungl.vulkan.huawei.VKHUAWEIClusterCullingShader.Descriptors.FD_vkCmdDrawClusterHUAWEI);
        registerForDowncall(overrungl.vulkan.huawei.VKHUAWEIClusterCullingShader.Descriptors.FD_vkCmdDrawClusterIndirectHUAWEI);
        registerForDowncall(overrungl.vulkan.ext.VKEXTPageableDeviceLocalMemory.Descriptors.FD_vkSetDeviceMemoryPriorityEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance4.Descriptors.FD_vkGetDeviceBufferMemoryRequirementsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance4.Descriptors.FD_vkGetDeviceImageMemoryRequirementsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance4.Descriptors.FD_vkGetDeviceImageSparseMemoryRequirementsKHR);
        registerForDowncall(overrungl.vulkan.valve.VKVALVEDescriptorSetHostMapping.Descriptors.FD_vkGetDescriptorSetLayoutHostMappingInfoVALVE);
        registerForDowncall(overrungl.vulkan.valve.VKVALVEDescriptorSetHostMapping.Descriptors.FD_vkGetDescriptorSetHostMappingVALVE);
        registerForDowncall(overrungl.vulkan.nv.VKNVCopyMemoryIndirect.Descriptors.FD_vkCmdCopyMemoryIndirectNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVCopyMemoryIndirect.Descriptors.FD_vkCmdCopyMemoryToImageIndirectNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVMemoryDecompression.Descriptors.FD_vkCmdDecompressMemoryNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVMemoryDecompression.Descriptors.FD_vkCmdDecompressMemoryIndirectCountNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommandsCompute.Descriptors.FD_vkGetPipelineIndirectMemoryRequirementsNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommandsCompute.Descriptors.FD_vkCmdUpdatePipelineIndirectBufferNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVDeviceGeneratedCommandsCompute.Descriptors.FD_vkGetPipelineIndirectDeviceAddressNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetDepthClampEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetPolygonModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetRasterizationSamplesEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetSampleMaskEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetAlphaToCoverageEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetAlphaToOneEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetLogicOpEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetColorBlendEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetColorBlendEquationEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetColorWriteMaskEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetTessellationDomainOriginEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetRasterizationStreamEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetConservativeRasterizationModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetExtraPrimitiveOverestimationSizeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetDepthClipEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetSampleLocationsEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetColorBlendAdvancedEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetProvokingVertexModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetLineRasterizationModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetLineStippleEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetDepthClipNegativeOneToOneEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetViewportWScalingEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetViewportSwizzleNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetCoverageToColorEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetCoverageToColorLocationNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetCoverageModulationModeNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetCoverageModulationTableEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetCoverageModulationTableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetShadingRateImageEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetRepresentativeFragmentTestEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTExtendedDynamicState3.Descriptors.FD_vkCmdSetCoverageReductionModeNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderModuleIdentifier.Descriptors.FD_vkGetShaderModuleIdentifierEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderModuleIdentifier.Descriptors.FD_vkGetShaderModuleCreateInfoIdentifierEXT);
        registerForDowncall(overrungl.vulkan.nv.VKNVOpticalFlow.Descriptors.FD_vkGetPhysicalDeviceOpticalFlowImageFormatsNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVOpticalFlow.Descriptors.FD_vkCreateOpticalFlowSessionNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVOpticalFlow.Descriptors.FD_vkDestroyOpticalFlowSessionNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVOpticalFlow.Descriptors.FD_vkBindOpticalFlowSessionImageNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVOpticalFlow.Descriptors.FD_vkCmdOpticalFlowExecuteNV);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance5.Descriptors.FD_vkCmdBindIndexBuffer2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance5.Descriptors.FD_vkGetRenderingAreaGranularityKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance5.Descriptors.FD_vkGetDeviceImageSubresourceLayoutKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance5.Descriptors.FD_vkGetImageSubresourceLayout2KHR);
        registerForDowncall(overrungl.vulkan.amd.VKAMDAntiLag.Descriptors.FD_vkAntiLagUpdateAMD);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCreateShadersEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkDestroyShaderEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkGetShaderBinaryDataEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdBindShadersEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetCullModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetFrontFaceEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetPrimitiveTopologyEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetViewportWithCountEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetScissorWithCountEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdBindVertexBuffers2EXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthTestEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthWriteEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthCompareOpEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthBoundsTestEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetStencilTestEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetStencilOpEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetVertexInputEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetPatchControlPointsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetRasterizerDiscardEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthBiasEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetLogicOpEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetPrimitiveRestartEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetTessellationDomainOriginEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthClampEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetPolygonModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetRasterizationSamplesEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetSampleMaskEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetAlphaToCoverageEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetAlphaToOneEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetLogicOpEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetColorBlendEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetColorBlendEquationEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetColorWriteMaskEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetRasterizationStreamEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetConservativeRasterizationModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetExtraPrimitiveOverestimationSizeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthClipEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetSampleLocationsEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetColorBlendAdvancedEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetProvokingVertexModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetLineRasterizationModeEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetLineStippleEnableEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthClipNegativeOneToOneEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetViewportWScalingEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetViewportSwizzleNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetCoverageToColorEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetCoverageToColorLocationNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetCoverageModulationModeNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetCoverageModulationTableEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetCoverageModulationTableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetShadingRateImageEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetRepresentativeFragmentTestEnableNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetCoverageReductionModeNV);
        registerForDowncall(overrungl.vulkan.ext.VKEXTShaderObject.Descriptors.FD_vkCmdSetDepthClampRangeEXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPipelineBinary.Descriptors.FD_vkCreatePipelineBinariesKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPipelineBinary.Descriptors.FD_vkDestroyPipelineBinaryKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPipelineBinary.Descriptors.FD_vkGetPipelineKeyKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPipelineBinary.Descriptors.FD_vkGetPipelineBinaryDataKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRPipelineBinary.Descriptors.FD_vkReleaseCapturedPipelineDataKHR);
        registerForDowncall(overrungl.vulkan.qcom.VKQCOMTileProperties.Descriptors.FD_vkGetFramebufferTilePropertiesQCOM);
        registerForDowncall(overrungl.vulkan.qcom.VKQCOMTileProperties.Descriptors.FD_vkGetDynamicRenderingTilePropertiesQCOM);
        registerForDowncall(overrungl.vulkan.nv.VKNVLowLatency2.Descriptors.FD_vkSetLatencySleepModeNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVLowLatency2.Descriptors.FD_vkLatencySleepNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVLowLatency2.Descriptors.FD_vkSetLatencyMarkerNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVLowLatency2.Descriptors.FD_vkGetLatencyTimingsNV);
        registerForDowncall(overrungl.vulkan.nv.VKNVLowLatency2.Descriptors.FD_vkQueueNotifyOutOfBandNV);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCooperativeMatrix.Descriptors.FD_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR);
        registerForDowncall(overrungl.vulkan.ext.VKEXTAttachmentFeedbackLoopDynamicState.Descriptors.FD_vkCmdSetAttachmentFeedbackLoopEnableEXT);
        registerForDowncall(overrungl.vulkan.qnx.VKQNXExternalMemoryScreenBuffer.Descriptors.FD_vkGetScreenBufferPropertiesQNX);
        registerForDowncall(overrungl.vulkan.khr.VKKHRLineRasterization.Descriptors.FD_vkCmdSetLineStippleKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCalibratedTimestamps.Descriptors.FD_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRCalibratedTimestamps.Descriptors.FD_vkGetCalibratedTimestampsKHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance6.Descriptors.FD_vkCmdBindDescriptorSets2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance6.Descriptors.FD_vkCmdPushConstants2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance6.Descriptors.FD_vkCmdPushDescriptorSet2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance6.Descriptors.FD_vkCmdPushDescriptorSetWithTemplate2KHR);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance6.Descriptors.FD_vkCmdSetDescriptorBufferOffsets2EXT);
        registerForDowncall(overrungl.vulkan.khr.VKKHRMaintenance6.Descriptors.FD_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkGetGeneratedCommandsMemoryRequirementsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkCmdPreprocessGeneratedCommandsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkCmdExecuteGeneratedCommandsEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkCreateIndirectCommandsLayoutEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkDestroyIndirectCommandsLayoutEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkCreateIndirectExecutionSetEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkDestroyIndirectExecutionSetEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkUpdateIndirectExecutionSetPipelineEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDeviceGeneratedCommands.Descriptors.FD_vkUpdateIndirectExecutionSetShaderEXT);
        registerForDowncall(overrungl.vulkan.ext.VKEXTDepthClampControl.Descriptors.FD_vkCmdSetDepthClampRangeEXT);
        registerForDowncall(overrungl.vulkan.nv.VKNVCooperativeMatrix2.Descriptors.FD_vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV);
        registerForUpcall(overrungl.vulkan.upcall.VkInternalAllocationNotification.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkInternalFreeNotification.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkReallocationFunction.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkAllocationFunction.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkFreeFunction.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkVoidFunction.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkDebugReportCallbackEXT.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkDebugUtilsMessengerCallbackEXT.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkFaultCallbackFunction.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkDeviceMemoryReportCallbackEXT.DESCRIPTOR);
        registerForUpcall(overrungl.vulkan.upcall.VkGetInstanceProcAddrLUNARG.DESCRIPTOR);
    }
}
