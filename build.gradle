plugins {
    id 'java-platform'
    id 'maven-publish'
}

group = projGroupId
version = projVersion

project(":core").ext.subName = ''
for (String p : ['glfw', 'joml', 'opengl', 'stb',
                 'samples']) {
    project(":$p").ext.subName = "-$p"
}

enum NativePlatform {
    WIN_32("windows", "i386", "windows-x86", "", ".dll", "Win32"),
    WIN_64("windows", "amd64", "windows", "", ".dll", "Win64"),
    WIN_ARM64("windows", "arm64", "windows-arm64", "", ".dll", "WinArm64"),
    MACOS("os x", "amd64", "macos", "lib", ".dylib", "Macos"),
    MACOS_ARM64("os x", "arm64", "macos-arm64", "lib", ".dylib", "MacosArm64"),

    private final String osFamilyName
    private final String osArch
    private final String classifier
    private final String nativeLibPrefix
    private final String nativeLibSuffix
    private final String taskSuffix

    NativePlatform(String osFamilyName, String osArch, String classifier,
                   String nativeLibPrefix, String nativeLibSuffix, String taskSuffix) {
        this.osFamilyName = osFamilyName
        this.osArch = osArch
        this.classifier = "natives-$classifier"
        this.nativeLibPrefix = nativeLibPrefix
        this.nativeLibSuffix = nativeLibSuffix
        this.taskSuffix = taskSuffix
    }

    String getOsFamilyName() {
        return osFamilyName
    }

    String getOsArch() {
        return osArch
    }

    String getClassifier() {
        return classifier
    }

    String getNativeLibPrefix() {
        return nativeLibPrefix
    }

    String getNativeLibSuffix() {
        return nativeLibSuffix
    }

    String getTaskSuffix() {
        return taskSuffix
    }
}

enum NativeBinding {
    GLFW("glfw", "glfw3", NativePlatform.WIN_32, NativePlatform.WIN_64, NativePlatform.MACOS, NativePlatform.MACOS_ARM64),
    STB("stb", "stb", NativePlatform.WIN_32, NativePlatform.WIN_64, NativePlatform.WIN_ARM64, NativePlatform.MACOS),

    private final String name
    private final String basename
    private final NativePlatform[] platforms

    private NativeBinding(String name, String basename, NativePlatform... platforms) {
        this.name = name
        this.platforms = platforms
        this.basename = basename
    }

    @Override
    String toString() {
        return name
    }

    String getBasename() {
        return basename
    }

    NativePlatform[] getPlatforms() {
        return platforms
    }
}

enum Artifact {
    CORE("overrungl", "OverrunGL",
        "The OverrunGL core library.",
        ":core", "Core"),
    GLFW("overrungl-glfw", "OverrunGL - GLFW bindings",
        "A multi-platform library for OpenGL, OpenGL ES and Vulkan development on the desktop. It provides a simple API for creating windows, contexts and surfaces, receiving input and events.",
        ":glfw", "Glfw", NativeBinding.GLFW),
    JOML('overrungl-joml', 'OverrunGL - JOML native access',
        'A Java math library for OpenGL rendering calculations',
        ':joml', 'Joml'),
    OPENGL("overrungl-opengl", "OverrunGL - OpenGL bindings",
        "The most widely adopted 2D and 3D graphics API in the industry, bringing thousands of applications to a wide variety of computer platforms.",
        ":opengl", "Opengl"),
    STB("overrungl-stb", "OverrunGL - stb bindings",
        "Single-file public domain libraries for fonts, images, ogg vorbis files and more.",
        ":stb", "Stb", NativeBinding.STB),
    //VULKAN("overrungl-vulkan", "OverrunGL - Vulkan bindings",
    //    "A new generation graphics and compute API that provides high-efficiency, cross-platform access to modern GPUs used in a wide variety of devices from PCs and consoles to mobile phones and embedded platforms.",
    //    ":vulkan", "Vulkan", null),

    private final String artifactName
    private final String projectName
    private final String projectDescription
    private final String subprojectName
    private final String mavenName
    private final NativeBinding nativeBinding

    Artifact(String artifactName, String projectName, String projectDescription,
             String subprojectName, String mavenName, NativeBinding nativeBinding = null) {
        this.artifactName = artifactName
        this.projectName = projectName
        this.projectDescription = projectDescription
        this.subprojectName = subprojectName
        this.mavenName = mavenName
        this.nativeBinding = nativeBinding
    }

    String getArtifactName() {
        return artifactName
    }

    String getProjectName() {
        return projectName
    }

    String getProjectDescription() {
        return projectDescription
    }

    String getSubprojectName() {
        return subprojectName
    }

    String getMavenName() {
        return mavenName
    }

    NativeBinding getNativeBinding() {
        return nativeBinding
    }

    String nativeFilename(NativePlatform platform) {
        if (nativeBinding == null) return null
        return "$nativeBinding/${platform.osFamilyName}/${platform.osArch}/${platform.nativeLibPrefix}${nativeBinding.basename}${platform.nativeLibSuffix}"
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'signing'

    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_19

    group = projGroupId
    archivesBaseName = "$projArtifactId$subName"
    version = projVersion

    repositories {
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/central' }
        // temporary maven repositories
        maven { url 'https://s01.oss.sonatype.org/content/repositories/releases' }
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
    }

    dependencies {
        compileOnly 'org.jetbrains:annotations:23.0.0'
        if (project.name != "core") {
            implementation project(':core')
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs += '--enable-preview'
    }

    tasks.withType(Javadoc).configureEach {
        if (options instanceof CoreJavadocOptions) {
            options.addBooleanOption('-enable-preview', true)
            options.addStringOption('source', sourceCompatibility.toString())
        }
    }

    jar {
        manifestContentCharset 'utf-8'
        metadataCharset 'utf-8'
        from 'LICENSE'
        manifest.attributes(
            'Specification-Title': projName,
            'Specification-Vendor': 'Overrun Organization',
            'Specification-Version': '0',
            'Implementation-Title': projName,
            'Implementation-Vendor': 'Overrun Organization',
            'Implementation-Version': archiveVersion
        )
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set 'sources'
        from sourceSets.main.allSource, 'LICENSE'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set 'javadoc'
        from javadoc, 'LICENSE'
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError = false
        options.encoding 'UTF-8'
        options.charSet 'UTF-8'
        options.author true
        options.locale 'en_US'
        options.links "https://docs.oracle.com/en/java/javase/${sourceCompatibility}/docs/api/"
        options.windowTitle "OverrunGL $projVersion Javadoc"
    }

    signing {
        if (!version.endsWith('-SNAPSHOT') && Boolean.parseBoolean(System.getProperty("gpg.signing", "true")))
            sign publishing.publications
    }

    idea.module.inheritOutputDirs = true
}

void setupPom(MavenPom pom, String pomName, String pomDescription, String pomPackaging) {
    pom.name.set pomName
    pom.description.set pomDescription
    pom.url.set "https://github.com/$projVcs"
    pom.packaging = pomPackaging
    pom.licenses {
        license {
            name.set 'MIT'
            url.set "https://raw.githubusercontent.com/$projVcs/$projBranch/LICENSE"
        }
    }
    pom.organization {
        name.set orgName
        url.set orgUrl
    }
    pom.developers {
        String[] prop = project.developers.split(',')
        for (String s : prop) {
            String[] dev = s.split(':', 3)
            developer {
                id.set dev[0]
                name.set dev[1]
                email.set dev[2]
            }
        }
    }
    pom.scm {
        connection.set "scm:git:https://github.com/${projVcs}.git"
        developerConnection.set "scm:git:https://github.com/${projVcs}.git"
        url.set "https://github.com/${projVcs}.git"
    }
}

void appendBOM(org.w3c.dom.Node dependencies, NativePlatform platform, Artifact module) {
    def dependency = dependencies.appendChild(dependencies.ownerDocument.createElement("dependency"))
    def groupId = dependency.appendChild(dependency.ownerDocument.createElement("groupId"))
    groupId.textContent = "io.github.over-run"
    dependency.appendChild(groupId)
    def artifactId = dependency.appendChild(dependency.ownerDocument.createElement("artifactId"))
    artifactId.textContent = module.artifactName
    dependency.appendChild(artifactId)
    def version = dependency.appendChild(dependency.ownerDocument.createElement("version"))
    version.textContent = project.version as String
    dependency.appendChild(version)
    if (platform != null) {
        def classifier = dependency.appendChild(dependency.ownerDocument.createElement("classifier"))
        classifier.textContent = platform.classifier
        dependency.appendChild(classifier)
    }
}

publishing.publications {
    for (Artifact module : Artifact.values()) {
        create("maven${module.mavenName}", MavenPublication) {
            groupId = projGroupId
            artifactId = module.artifactName
            version = projVersion
            description = module.projectDescription
            def proj = project(module.subprojectName)
            artifact proj.jar
            artifact(proj.sourcesJar) {
                classifier = 'sources'
            }
            artifact(proj.javadocJar) {
                classifier = 'javadoc'
            }
            if (module.nativeBinding != null) {
                for (NativePlatform platform : module.nativeBinding.platforms) {
                    String nativeFn = module.nativeFilename(platform)
                    File file = new File("${rootProject.projectDir}/natives/$nativeFn")
                    if (file.exists()) {
                        String nativeParentFn = new File(nativeFn).parent
                        artifact(tasks.create("nativeJar${module.mavenName}${platform.taskSuffix}", Jar) {
                            archiveClassifier.set platform.classifier
                            archiveBaseName.set module.artifactName
                            from(file) { into nativeParentFn }
                        }) {
                            classifier = platform.classifier
                        }
                    }
                }
            }
            pom {
                setupPom(it, module.projectName, module.projectDescription, "jar")
                if (module != Artifact.CORE) {
                    withXml {
                        def dependencies = asNode().appendNode("dependencies")
                        def dependency = dependencies.appendNode("dependency")
                        dependency.appendNode("groupId", "io.github.over-run")
                        dependency.appendNode("artifactId", "overrungl")
                        dependency.appendNode("version", project.version)
                        dependency.appendNode("scope", "compile")
                    }
                }
            }
        }
    }
    create("overrunglBOM", MavenPublication) {
        from(components.javaPlatform)
        artifactId = "overrungl-bom"

        pom {
            setupPom(it, "OverrunGL BOM", "OverrunGL Bill of Materials.", "pom")

            withXml {
                def dependencyManagement = asElement().getElementsByTagName("dependencyManagement").item(0)
                def dependencies = asElement().getElementsByTagName("dependencies").item(0)
                for (Artifact module : Artifact.values()) {
                    if (module.nativeBinding != null) {
                        for (NativePlatform platform : module.nativeBinding.platforms) {
                            appendBOM(dependencies, platform, module)
                        }
                    } else {
                        appendBOM(dependencies, null, module)
                    }
                }

                // Workaround for https://github.com/gradle/gradle/issues/7529
                asNode()
            }
        }
    }
}

// You have to add 'OSSRH_USERNAME', 'OSSRH_PASSWORD', 'signing.keyId',
// 'signing.password' and 'signing.secretKeyRingFile' to
// GRADLE_USER_HOME/gradle.properties
publishing.repositories {
    maven {
        name = "OSSRH"
        credentials {
            username = project.findProperty("OSSRH_USERNAME") ?: "null"
            password = project.findProperty("OSSRH_PASSWORD") ?: "null"
        }
        url = version.endsWith('-SNAPSHOT')
            ? "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
    }
}

dependencies {
    constraints {
        for (Artifact module : Artifact.values()) {
            api "io.github.over-run:${module.artifactName}:$version"
        }
    }
}
